"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tanstack";
exports.ids = ["vendor-chunks/@tanstack"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tanstack/react-virtual/dist/esm/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tanstack/react-virtual/dist/esm/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Virtualizer: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.Virtualizer),\n/* harmony export */   approxEqual: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.approxEqual),\n/* harmony export */   debounce: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.debounce),\n/* harmony export */   defaultKeyExtractor: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.defaultKeyExtractor),\n/* harmony export */   defaultRangeExtractor: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.defaultRangeExtractor),\n/* harmony export */   elementScroll: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.elementScroll),\n/* harmony export */   measureElement: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.measureElement),\n/* harmony export */   memo: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.memo),\n/* harmony export */   notUndefined: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.notUndefined),\n/* harmony export */   observeElementOffset: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeElementOffset),\n/* harmony export */   observeElementRect: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeElementRect),\n/* harmony export */   observeWindowOffset: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeWindowOffset),\n/* harmony export */   observeWindowRect: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeWindowRect),\n/* harmony export */   useVirtualizer: () => (/* binding */ useVirtualizer),\n/* harmony export */   useWindowVirtualizer: () => (/* binding */ useWindowVirtualizer),\n/* harmony export */   windowScroll: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.windowScroll)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tanstack/virtual-core */ \"(ssr)/./node_modules/@tanstack/virtual-core/dist/esm/index.js\");\n\n\n\n\nconst useIsomorphicLayoutEffect = typeof document !== \"undefined\" ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nfunction useVirtualizerBase(options) {\n    const rerender = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(()=>({}), {})[1];\n    const resolvedOptions = {\n        ...options,\n        onChange: (instance2, sync)=>{\n            var _a;\n            if (sync) {\n                (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(rerender);\n            } else {\n                rerender();\n            }\n            (_a = options.onChange) == null ? void 0 : _a.call(options, instance2, sync);\n        }\n    };\n    const [instance] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>new _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.Virtualizer(resolvedOptions));\n    instance.setOptions(resolvedOptions);\n    useIsomorphicLayoutEffect(()=>{\n        return instance._didMount();\n    }, []);\n    useIsomorphicLayoutEffect(()=>{\n        return instance._willUpdate();\n    });\n    return instance;\n}\nfunction useVirtualizer(options) {\n    return useVirtualizerBase({\n        observeElementRect: _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeElementRect,\n        observeElementOffset: _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeElementOffset,\n        scrollToFn: _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.elementScroll,\n        ...options\n    });\n}\nfunction useWindowVirtualizer(options) {\n    return useVirtualizerBase({\n        getScrollElement: ()=>typeof document !== \"undefined\" ? window : null,\n        observeElementRect: _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeWindowRect,\n        observeElementOffset: _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeWindowOffset,\n        scrollToFn: _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.windowScroll,\n        initialOffset: ()=>typeof document !== \"undefined\" ? window.scrollY : 0,\n        ...options\n    });\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXZpcnR1YWwvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUErQjtBQUNPO0FBQzhIO0FBQzdIO0FBQ3ZDLE1BQU1TLDRCQUE0QixPQUFPQyxhQUFhLGNBQWNWLGtEQUFxQixHQUFHQSw0Q0FBZTtBQUMzRyxTQUFTYSxtQkFBbUJDLE9BQU87SUFDakMsTUFBTUMsV0FBV2YsNkNBQWdCLENBQUMsSUFBTyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRTtJQUNwRCxNQUFNaUIsa0JBQWtCO1FBQ3RCLEdBQUdILE9BQU87UUFDVkksVUFBVSxDQUFDQyxXQUFXQztZQUNwQixJQUFJQztZQUNKLElBQUlELE1BQU07Z0JBQ1JuQixvREFBU0EsQ0FBQ2M7WUFDWixPQUFPO2dCQUNMQTtZQUNGO1lBQ0NNLENBQUFBLEtBQUtQLFFBQVFJLFFBQVEsS0FBSyxPQUFPLEtBQUssSUFBSUcsR0FBR0MsSUFBSSxDQUFDUixTQUFTSyxXQUFXQztRQUN6RTtJQUNGO0lBQ0EsTUFBTSxDQUFDRyxTQUFTLEdBQUd2QiwyQ0FBYyxDQUMvQixJQUFNLElBQUlRLCtEQUFXQSxDQUFDUztJQUV4Qk0sU0FBU0UsVUFBVSxDQUFDUjtJQUNwQlIsMEJBQTBCO1FBQ3hCLE9BQU9jLFNBQVNHLFNBQVM7SUFDM0IsR0FBRyxFQUFFO0lBQ0xqQiwwQkFBMEI7UUFDeEIsT0FBT2MsU0FBU0ksV0FBVztJQUM3QjtJQUNBLE9BQU9KO0FBQ1Q7QUFDQSxTQUFTSyxlQUFlZCxPQUFPO0lBQzdCLE9BQU9ELG1CQUFtQjtRQUN4Qlgsa0JBQWtCQSx3RUFBQUE7UUFDbEJDLG9CQUFvQkEsMEVBQUFBO1FBQ3BCMEIsWUFBWXpCLGlFQUFhQTtRQUN6QixHQUFHVSxPQUFPO0lBQ1o7QUFDRjtBQUNBLFNBQVNnQixxQkFBcUJoQixPQUFPO0lBQ25DLE9BQU9ELG1CQUFtQjtRQUN4QmtCLGtCQUFrQixJQUFNLE9BQU9yQixhQUFhLGNBQWNzQixTQUFTO1FBQ25FOUIsb0JBQW9CRyxxRUFBaUJBO1FBQ3JDRixzQkFBc0JHLHVFQUFtQkE7UUFDekN1QixZQUFZdEIsZ0VBQVlBO1FBQ3hCMEIsZUFBZSxJQUFNLE9BQU92QixhQUFhLGNBQWNzQixPQUFPRSxPQUFPLEdBQUc7UUFDeEUsR0FBR3BCLE9BQU87SUFDWjtBQUNGO0FBSUUsQ0FDRixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLXZpei1wbGF0Zm9ybS8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcmVhY3QtdmlydHVhbC9kaXN0L2VzbS9pbmRleC5qcz85YmY1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgZmx1c2hTeW5jIH0gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IHsgb2JzZXJ2ZUVsZW1lbnRSZWN0LCBvYnNlcnZlRWxlbWVudE9mZnNldCwgZWxlbWVudFNjcm9sbCwgb2JzZXJ2ZVdpbmRvd1JlY3QsIG9ic2VydmVXaW5kb3dPZmZzZXQsIHdpbmRvd1Njcm9sbCwgVmlydHVhbGl6ZXIgfSBmcm9tIFwiQHRhbnN0YWNrL3ZpcnR1YWwtY29yZVwiO1xuZXhwb3J0ICogZnJvbSBcIkB0YW5zdGFjay92aXJ0dWFsLWNvcmVcIjtcbmNvbnN0IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSB0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3Q7XG5mdW5jdGlvbiB1c2VWaXJ0dWFsaXplckJhc2Uob3B0aW9ucykge1xuICBjb25zdCByZXJlbmRlciA9IFJlYWN0LnVzZVJlZHVjZXIoKCkgPT4gKHt9KSwge30pWzFdO1xuICBjb25zdCByZXNvbHZlZE9wdGlvbnMgPSB7XG4gICAgLi4ub3B0aW9ucyxcbiAgICBvbkNoYW5nZTogKGluc3RhbmNlMiwgc3luYykgPT4ge1xuICAgICAgdmFyIF9hO1xuICAgICAgaWYgKHN5bmMpIHtcbiAgICAgICAgZmx1c2hTeW5jKHJlcmVuZGVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcmVuZGVyKCk7XG4gICAgICB9XG4gICAgICAoX2EgPSBvcHRpb25zLm9uQ2hhbmdlKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbChvcHRpb25zLCBpbnN0YW5jZTIsIHN5bmMpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgW2luc3RhbmNlXSA9IFJlYWN0LnVzZVN0YXRlKFxuICAgICgpID0+IG5ldyBWaXJ0dWFsaXplcihyZXNvbHZlZE9wdGlvbnMpXG4gICk7XG4gIGluc3RhbmNlLnNldE9wdGlvbnMocmVzb2x2ZWRPcHRpb25zKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuIGluc3RhbmNlLl9kaWRNb3VudCgpO1xuICB9LCBbXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiBpbnN0YW5jZS5fd2lsbFVwZGF0ZSgpO1xuICB9KTtcbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuZnVuY3Rpb24gdXNlVmlydHVhbGl6ZXIob3B0aW9ucykge1xuICByZXR1cm4gdXNlVmlydHVhbGl6ZXJCYXNlKHtcbiAgICBvYnNlcnZlRWxlbWVudFJlY3QsXG4gICAgb2JzZXJ2ZUVsZW1lbnRPZmZzZXQsXG4gICAgc2Nyb2xsVG9GbjogZWxlbWVudFNjcm9sbCxcbiAgICAuLi5vcHRpb25zXG4gIH0pO1xufVxuZnVuY3Rpb24gdXNlV2luZG93VmlydHVhbGl6ZXIob3B0aW9ucykge1xuICByZXR1cm4gdXNlVmlydHVhbGl6ZXJCYXNlKHtcbiAgICBnZXRTY3JvbGxFbGVtZW50OiAoKSA9PiB0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiBudWxsLFxuICAgIG9ic2VydmVFbGVtZW50UmVjdDogb2JzZXJ2ZVdpbmRvd1JlY3QsXG4gICAgb2JzZXJ2ZUVsZW1lbnRPZmZzZXQ6IG9ic2VydmVXaW5kb3dPZmZzZXQsXG4gICAgc2Nyb2xsVG9Gbjogd2luZG93U2Nyb2xsLFxuICAgIGluaXRpYWxPZmZzZXQ6ICgpID0+IHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdy5zY3JvbGxZIDogMCxcbiAgICAuLi5vcHRpb25zXG4gIH0pO1xufVxuZXhwb3J0IHtcbiAgdXNlVmlydHVhbGl6ZXIsXG4gIHVzZVdpbmRvd1ZpcnR1YWxpemVyXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiUmVhY3QiLCJmbHVzaFN5bmMiLCJvYnNlcnZlRWxlbWVudFJlY3QiLCJvYnNlcnZlRWxlbWVudE9mZnNldCIsImVsZW1lbnRTY3JvbGwiLCJvYnNlcnZlV2luZG93UmVjdCIsIm9ic2VydmVXaW5kb3dPZmZzZXQiLCJ3aW5kb3dTY3JvbGwiLCJWaXJ0dWFsaXplciIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJkb2N1bWVudCIsInVzZUxheW91dEVmZmVjdCIsInVzZUVmZmVjdCIsInVzZVZpcnR1YWxpemVyQmFzZSIsIm9wdGlvbnMiLCJyZXJlbmRlciIsInVzZVJlZHVjZXIiLCJyZXNvbHZlZE9wdGlvbnMiLCJvbkNoYW5nZSIsImluc3RhbmNlMiIsInN5bmMiLCJfYSIsImNhbGwiLCJpbnN0YW5jZSIsInVzZVN0YXRlIiwic2V0T3B0aW9ucyIsIl9kaWRNb3VudCIsIl93aWxsVXBkYXRlIiwidXNlVmlydHVhbGl6ZXIiLCJzY3JvbGxUb0ZuIiwidXNlV2luZG93VmlydHVhbGl6ZXIiLCJnZXRTY3JvbGxFbGVtZW50Iiwid2luZG93IiwiaW5pdGlhbE9mZnNldCIsInNjcm9sbFkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-virtual/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/virtual-core/dist/esm/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tanstack/virtual-core/dist/esm/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Virtualizer: () => (/* binding */ Virtualizer),\n/* harmony export */   approxEqual: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_0__.approxEqual),\n/* harmony export */   debounce: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_0__.debounce),\n/* harmony export */   defaultKeyExtractor: () => (/* binding */ defaultKeyExtractor),\n/* harmony export */   defaultRangeExtractor: () => (/* binding */ defaultRangeExtractor),\n/* harmony export */   elementScroll: () => (/* binding */ elementScroll),\n/* harmony export */   measureElement: () => (/* binding */ measureElement),\n/* harmony export */   memo: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_0__.memo),\n/* harmony export */   notUndefined: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_0__.notUndefined),\n/* harmony export */   observeElementOffset: () => (/* binding */ observeElementOffset),\n/* harmony export */   observeElementRect: () => (/* binding */ observeElementRect),\n/* harmony export */   observeWindowOffset: () => (/* binding */ observeWindowOffset),\n/* harmony export */   observeWindowRect: () => (/* binding */ observeWindowRect),\n/* harmony export */   windowScroll: () => (/* binding */ windowScroll)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/virtual-core/dist/esm/utils.js\");\n\nconst defaultKeyExtractor = (index)=>index;\nconst defaultRangeExtractor = (range)=>{\n    const start = Math.max(range.startIndex - range.overscan, 0);\n    const end = Math.min(range.endIndex + range.overscan, range.count - 1);\n    const arr = [];\n    for(let i = start; i <= end; i++){\n        arr.push(i);\n    }\n    return arr;\n};\nconst observeElementRect = (instance, cb)=>{\n    const element = instance.scrollElement;\n    if (!element) {\n        return;\n    }\n    const targetWindow = instance.targetWindow;\n    if (!targetWindow) {\n        return;\n    }\n    const handler = (rect)=>{\n        const { width, height } = rect;\n        cb({\n            width: Math.round(width),\n            height: Math.round(height)\n        });\n    };\n    handler(element.getBoundingClientRect());\n    if (!targetWindow.ResizeObserver) {\n        return ()=>{};\n    }\n    const observer = new targetWindow.ResizeObserver((entries)=>{\n        const entry = entries[0];\n        if (entry == null ? void 0 : entry.borderBoxSize) {\n            const box = entry.borderBoxSize[0];\n            if (box) {\n                handler({\n                    width: box.inlineSize,\n                    height: box.blockSize\n                });\n                return;\n            }\n        }\n        handler(element.getBoundingClientRect());\n    });\n    observer.observe(element, {\n        box: \"border-box\"\n    });\n    return ()=>{\n        observer.unobserve(element);\n    };\n};\nconst addEventListenerOptions = {\n    passive: true\n};\nconst observeWindowRect = (instance, cb)=>{\n    const element = instance.scrollElement;\n    if (!element) {\n        return;\n    }\n    const handler = ()=>{\n        cb({\n            width: element.innerWidth,\n            height: element.innerHeight\n        });\n    };\n    handler();\n    element.addEventListener(\"resize\", handler, addEventListenerOptions);\n    return ()=>{\n        element.removeEventListener(\"resize\", handler);\n    };\n};\nconst supportsScrollend =  true ? true : 0;\nconst observeElementOffset = (instance, cb)=>{\n    const element = instance.scrollElement;\n    if (!element) {\n        return;\n    }\n    const targetWindow = instance.targetWindow;\n    if (!targetWindow) {\n        return;\n    }\n    let offset = 0;\n    const fallback = instance.options.useScrollendEvent && supportsScrollend ? ()=>void 0 : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.debounce)(targetWindow, ()=>{\n        cb(offset, false);\n    }, instance.options.isScrollingResetDelay);\n    const createHandler = (isScrolling)=>()=>{\n            const { horizontal, isRtl } = instance.options;\n            offset = horizontal ? element[\"scrollLeft\"] * (isRtl && -1 || 1) : element[\"scrollTop\"];\n            fallback();\n            cb(offset, isScrolling);\n        };\n    const handler = createHandler(true);\n    const endHandler = createHandler(false);\n    endHandler();\n    element.addEventListener(\"scroll\", handler, addEventListenerOptions);\n    element.addEventListener(\"scrollend\", endHandler, addEventListenerOptions);\n    return ()=>{\n        element.removeEventListener(\"scroll\", handler);\n        element.removeEventListener(\"scrollend\", endHandler);\n    };\n};\nconst observeWindowOffset = (instance, cb)=>{\n    const element = instance.scrollElement;\n    if (!element) {\n        return;\n    }\n    const targetWindow = instance.targetWindow;\n    if (!targetWindow) {\n        return;\n    }\n    let offset = 0;\n    const fallback = instance.options.useScrollendEvent && supportsScrollend ? ()=>void 0 : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.debounce)(targetWindow, ()=>{\n        cb(offset, false);\n    }, instance.options.isScrollingResetDelay);\n    const createHandler = (isScrolling)=>()=>{\n            offset = element[instance.options.horizontal ? \"scrollX\" : \"scrollY\"];\n            fallback();\n            cb(offset, isScrolling);\n        };\n    const handler = createHandler(true);\n    const endHandler = createHandler(false);\n    endHandler();\n    element.addEventListener(\"scroll\", handler, addEventListenerOptions);\n    element.addEventListener(\"scrollend\", endHandler, addEventListenerOptions);\n    return ()=>{\n        element.removeEventListener(\"scroll\", handler);\n        element.removeEventListener(\"scrollend\", endHandler);\n    };\n};\nconst measureElement = (element, entry, instance)=>{\n    if (entry == null ? void 0 : entry.borderBoxSize) {\n        const box = entry.borderBoxSize[0];\n        if (box) {\n            const size = Math.round(box[instance.options.horizontal ? \"inlineSize\" : \"blockSize\"]);\n            return size;\n        }\n    }\n    return Math.round(element.getBoundingClientRect()[instance.options.horizontal ? \"width\" : \"height\"]);\n};\nconst windowScroll = (offset, { adjustments = 0, behavior }, instance)=>{\n    var _a, _b;\n    const toOffset = offset + adjustments;\n    (_b = (_a = instance.scrollElement) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, {\n        [instance.options.horizontal ? \"left\" : \"top\"]: toOffset,\n        behavior\n    });\n};\nconst elementScroll = (offset, { adjustments = 0, behavior }, instance)=>{\n    var _a, _b;\n    const toOffset = offset + adjustments;\n    (_b = (_a = instance.scrollElement) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, {\n        [instance.options.horizontal ? \"left\" : \"top\"]: toOffset,\n        behavior\n    });\n};\nclass Virtualizer {\n    constructor(opts){\n        this.unsubs = [];\n        this.scrollElement = null;\n        this.targetWindow = null;\n        this.isScrolling = false;\n        this.scrollToIndexTimeoutId = null;\n        this.measurementsCache = [];\n        this.itemSizeCache = /* @__PURE__ */ new Map();\n        this.pendingMeasuredCacheIndexes = [];\n        this.scrollRect = null;\n        this.scrollOffset = null;\n        this.scrollDirection = null;\n        this.scrollAdjustments = 0;\n        this.elementsCache = /* @__PURE__ */ new Map();\n        this.observer = /* @__PURE__ */ (()=>{\n            let _ro = null;\n            const get = ()=>{\n                if (_ro) {\n                    return _ro;\n                }\n                if (!this.targetWindow || !this.targetWindow.ResizeObserver) {\n                    return null;\n                }\n                return _ro = new this.targetWindow.ResizeObserver((entries)=>{\n                    entries.forEach((entry)=>{\n                        this._measureElement(entry.target, entry);\n                    });\n                });\n            };\n            return {\n                disconnect: ()=>{\n                    var _a;\n                    (_a = get()) == null ? void 0 : _a.disconnect();\n                    _ro = null;\n                },\n                observe: (target)=>{\n                    var _a;\n                    return (_a = get()) == null ? void 0 : _a.observe(target, {\n                        box: \"border-box\"\n                    });\n                },\n                unobserve: (target)=>{\n                    var _a;\n                    return (_a = get()) == null ? void 0 : _a.unobserve(target);\n                }\n            };\n        })();\n        this.range = null;\n        this.setOptions = (opts2)=>{\n            Object.entries(opts2).forEach(([key, value])=>{\n                if (typeof value === \"undefined\") delete opts2[key];\n            });\n            this.options = {\n                debug: false,\n                initialOffset: 0,\n                overscan: 1,\n                paddingStart: 0,\n                paddingEnd: 0,\n                scrollPaddingStart: 0,\n                scrollPaddingEnd: 0,\n                horizontal: false,\n                getItemKey: defaultKeyExtractor,\n                rangeExtractor: defaultRangeExtractor,\n                onChange: ()=>{},\n                measureElement,\n                initialRect: {\n                    width: 0,\n                    height: 0\n                },\n                scrollMargin: 0,\n                gap: 0,\n                indexAttribute: \"data-index\",\n                initialMeasurementsCache: [],\n                lanes: 1,\n                isScrollingResetDelay: 150,\n                enabled: true,\n                isRtl: false,\n                useScrollendEvent: true,\n                ...opts2\n            };\n        };\n        this.notify = (sync)=>{\n            var _a, _b;\n            (_b = (_a = this.options).onChange) == null ? void 0 : _b.call(_a, this, sync);\n        };\n        this.maybeNotify = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.memo)(()=>{\n            this.calculateRange();\n            return [\n                this.isScrolling,\n                this.range ? this.range.startIndex : null,\n                this.range ? this.range.endIndex : null\n            ];\n        }, (isScrolling)=>{\n            this.notify(isScrolling);\n        }, {\n            key:  true && \"maybeNotify\",\n            debug: ()=>this.options.debug,\n            initialDeps: [\n                this.isScrolling,\n                this.range ? this.range.startIndex : null,\n                this.range ? this.range.endIndex : null\n            ]\n        });\n        this.cleanup = ()=>{\n            this.unsubs.filter(Boolean).forEach((d)=>d());\n            this.unsubs = [];\n            this.observer.disconnect();\n            this.scrollElement = null;\n            this.targetWindow = null;\n        };\n        this._didMount = ()=>{\n            return ()=>{\n                this.cleanup();\n            };\n        };\n        this._willUpdate = ()=>{\n            var _a;\n            const scrollElement = this.options.enabled ? this.options.getScrollElement() : null;\n            if (this.scrollElement !== scrollElement) {\n                this.cleanup();\n                if (!scrollElement) {\n                    this.maybeNotify();\n                    return;\n                }\n                this.scrollElement = scrollElement;\n                if (this.scrollElement && \"ownerDocument\" in this.scrollElement) {\n                    this.targetWindow = this.scrollElement.ownerDocument.defaultView;\n                } else {\n                    this.targetWindow = ((_a = this.scrollElement) == null ? void 0 : _a.window) ?? null;\n                }\n                this.elementsCache.forEach((cached)=>{\n                    this.observer.observe(cached);\n                });\n                this._scrollToOffset(this.getScrollOffset(), {\n                    adjustments: void 0,\n                    behavior: void 0\n                });\n                this.unsubs.push(this.options.observeElementRect(this, (rect)=>{\n                    this.scrollRect = rect;\n                    this.maybeNotify();\n                }));\n                this.unsubs.push(this.options.observeElementOffset(this, (offset, isScrolling)=>{\n                    this.scrollAdjustments = 0;\n                    this.scrollDirection = isScrolling ? this.getScrollOffset() < offset ? \"forward\" : \"backward\" : null;\n                    this.scrollOffset = offset;\n                    this.isScrolling = isScrolling;\n                    this.maybeNotify();\n                }));\n            }\n        };\n        this.getSize = ()=>{\n            if (!this.options.enabled) {\n                this.scrollRect = null;\n                return 0;\n            }\n            this.scrollRect = this.scrollRect ?? this.options.initialRect;\n            return this.scrollRect[this.options.horizontal ? \"width\" : \"height\"];\n        };\n        this.getScrollOffset = ()=>{\n            if (!this.options.enabled) {\n                this.scrollOffset = null;\n                return 0;\n            }\n            this.scrollOffset = this.scrollOffset ?? (typeof this.options.initialOffset === \"function\" ? this.options.initialOffset() : this.options.initialOffset);\n            return this.scrollOffset;\n        };\n        this.getFurthestMeasurement = (measurements, index)=>{\n            const furthestMeasurementsFound = /* @__PURE__ */ new Map();\n            const furthestMeasurements = /* @__PURE__ */ new Map();\n            for(let m = index - 1; m >= 0; m--){\n                const measurement = measurements[m];\n                if (furthestMeasurementsFound.has(measurement.lane)) {\n                    continue;\n                }\n                const previousFurthestMeasurement = furthestMeasurements.get(measurement.lane);\n                if (previousFurthestMeasurement == null || measurement.end > previousFurthestMeasurement.end) {\n                    furthestMeasurements.set(measurement.lane, measurement);\n                } else if (measurement.end < previousFurthestMeasurement.end) {\n                    furthestMeasurementsFound.set(measurement.lane, true);\n                }\n                if (furthestMeasurementsFound.size === this.options.lanes) {\n                    break;\n                }\n            }\n            return furthestMeasurements.size === this.options.lanes ? Array.from(furthestMeasurements.values()).sort((a, b)=>{\n                if (a.end === b.end) {\n                    return a.index - b.index;\n                }\n                return a.end - b.end;\n            })[0] : void 0;\n        };\n        this.getMeasurementOptions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.memo)(()=>[\n                this.options.count,\n                this.options.paddingStart,\n                this.options.scrollMargin,\n                this.options.getItemKey,\n                this.options.enabled\n            ], (count, paddingStart, scrollMargin, getItemKey, enabled)=>{\n            this.pendingMeasuredCacheIndexes = [];\n            return {\n                count,\n                paddingStart,\n                scrollMargin,\n                getItemKey,\n                enabled\n            };\n        }, {\n            key: false\n        });\n        this.getMeasurements = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.memo)(()=>[\n                this.getMeasurementOptions(),\n                this.itemSizeCache\n            ], ({ count, paddingStart, scrollMargin, getItemKey, enabled }, itemSizeCache)=>{\n            if (!enabled) {\n                this.measurementsCache = [];\n                this.itemSizeCache.clear();\n                return [];\n            }\n            if (this.measurementsCache.length === 0) {\n                this.measurementsCache = this.options.initialMeasurementsCache;\n                this.measurementsCache.forEach((item)=>{\n                    this.itemSizeCache.set(item.key, item.size);\n                });\n            }\n            const min = this.pendingMeasuredCacheIndexes.length > 0 ? Math.min(...this.pendingMeasuredCacheIndexes) : 0;\n            this.pendingMeasuredCacheIndexes = [];\n            const measurements = this.measurementsCache.slice(0, min);\n            for(let i = min; i < count; i++){\n                const key = getItemKey(i);\n                const furthestMeasurement = this.options.lanes === 1 ? measurements[i - 1] : this.getFurthestMeasurement(measurements, i);\n                const start = furthestMeasurement ? furthestMeasurement.end + this.options.gap : paddingStart + scrollMargin;\n                const measuredSize = itemSizeCache.get(key);\n                const size = typeof measuredSize === \"number\" ? measuredSize : this.options.estimateSize(i);\n                const end = start + size;\n                const lane = furthestMeasurement ? furthestMeasurement.lane : i % this.options.lanes;\n                measurements[i] = {\n                    index: i,\n                    start,\n                    size,\n                    end,\n                    key,\n                    lane\n                };\n            }\n            this.measurementsCache = measurements;\n            return measurements;\n        }, {\n            key:  true && \"getMeasurements\",\n            debug: ()=>this.options.debug\n        });\n        this.calculateRange = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.memo)(()=>[\n                this.getMeasurements(),\n                this.getSize(),\n                this.getScrollOffset()\n            ], (measurements, outerSize, scrollOffset)=>{\n            return this.range = measurements.length > 0 && outerSize > 0 ? calculateRange({\n                measurements,\n                outerSize,\n                scrollOffset\n            }) : null;\n        }, {\n            key:  true && \"calculateRange\",\n            debug: ()=>this.options.debug\n        });\n        this.getIndexes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.memo)(()=>[\n                this.options.rangeExtractor,\n                this.calculateRange(),\n                this.options.overscan,\n                this.options.count\n            ], (rangeExtractor, range, overscan, count)=>{\n            return range === null ? [] : rangeExtractor({\n                startIndex: range.startIndex,\n                endIndex: range.endIndex,\n                overscan,\n                count\n            });\n        }, {\n            key:  true && \"getIndexes\",\n            debug: ()=>this.options.debug\n        });\n        this.indexFromElement = (node)=>{\n            const attributeName = this.options.indexAttribute;\n            const indexStr = node.getAttribute(attributeName);\n            if (!indexStr) {\n                console.warn(`Missing attribute name '${attributeName}={index}' on measured element.`);\n                return -1;\n            }\n            return parseInt(indexStr, 10);\n        };\n        this._measureElement = (node, entry)=>{\n            const index = this.indexFromElement(node);\n            const item = this.measurementsCache[index];\n            if (!item) {\n                return;\n            }\n            const key = item.key;\n            const prevNode = this.elementsCache.get(key);\n            if (prevNode !== node) {\n                if (prevNode) {\n                    this.observer.unobserve(prevNode);\n                }\n                this.observer.observe(node);\n                this.elementsCache.set(key, node);\n            }\n            if (node.isConnected) {\n                this.resizeItem(index, this.options.measureElement(node, entry, this));\n            }\n        };\n        this.resizeItem = (index, size)=>{\n            const item = this.measurementsCache[index];\n            if (!item) {\n                return;\n            }\n            const itemSize = this.itemSizeCache.get(item.key) ?? item.size;\n            const delta = size - itemSize;\n            if (delta !== 0) {\n                if (this.shouldAdjustScrollPositionOnItemSizeChange !== void 0 ? this.shouldAdjustScrollPositionOnItemSizeChange(item, delta, this) : item.start < this.getScrollOffset() + this.scrollAdjustments) {\n                    if ( true && this.options.debug) {\n                        console.info(\"correction\", delta);\n                    }\n                    this._scrollToOffset(this.getScrollOffset(), {\n                        adjustments: this.scrollAdjustments += delta,\n                        behavior: void 0\n                    });\n                }\n                this.pendingMeasuredCacheIndexes.push(item.index);\n                this.itemSizeCache = new Map(this.itemSizeCache.set(item.key, size));\n                this.notify(false);\n            }\n        };\n        this.measureElement = (node)=>{\n            if (!node) {\n                this.elementsCache.forEach((cached, key)=>{\n                    if (!cached.isConnected) {\n                        this.observer.unobserve(cached);\n                        this.elementsCache.delete(key);\n                    }\n                });\n                return;\n            }\n            this._measureElement(node, void 0);\n        };\n        this.getVirtualItems = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.memo)(()=>[\n                this.getIndexes(),\n                this.getMeasurements()\n            ], (indexes, measurements)=>{\n            const virtualItems = [];\n            for(let k = 0, len = indexes.length; k < len; k++){\n                const i = indexes[k];\n                const measurement = measurements[i];\n                virtualItems.push(measurement);\n            }\n            return virtualItems;\n        }, {\n            key:  true && \"getVirtualItems\",\n            debug: ()=>this.options.debug\n        });\n        this.getVirtualItemForOffset = (offset)=>{\n            const measurements = this.getMeasurements();\n            if (measurements.length === 0) {\n                return void 0;\n            }\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.notUndefined)(measurements[findNearestBinarySearch(0, measurements.length - 1, (index)=>(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.notUndefined)(measurements[index]).start, offset)]);\n        };\n        this.getOffsetForAlignment = (toOffset, align)=>{\n            const size = this.getSize();\n            const scrollOffset = this.getScrollOffset();\n            if (align === \"auto\") {\n                if (toOffset >= scrollOffset + size) {\n                    align = \"end\";\n                }\n            }\n            if (align === \"end\") {\n                toOffset -= size;\n            }\n            const scrollSizeProp = this.options.horizontal ? \"scrollWidth\" : \"scrollHeight\";\n            const scrollSize = this.scrollElement ? \"document\" in this.scrollElement ? this.scrollElement.document.documentElement[scrollSizeProp] : this.scrollElement[scrollSizeProp] : 0;\n            const maxOffset = scrollSize - size;\n            return Math.max(Math.min(maxOffset, toOffset), 0);\n        };\n        this.getOffsetForIndex = (index, align = \"auto\")=>{\n            index = Math.max(0, Math.min(index, this.options.count - 1));\n            const item = this.measurementsCache[index];\n            if (!item) {\n                return void 0;\n            }\n            const size = this.getSize();\n            const scrollOffset = this.getScrollOffset();\n            if (align === \"auto\") {\n                if (item.end >= scrollOffset + size - this.options.scrollPaddingEnd) {\n                    align = \"end\";\n                } else if (item.start <= scrollOffset + this.options.scrollPaddingStart) {\n                    align = \"start\";\n                } else {\n                    return [\n                        scrollOffset,\n                        align\n                    ];\n                }\n            }\n            const centerOffset = item.start - this.options.scrollPaddingStart + (item.size - size) / 2;\n            switch(align){\n                case \"center\":\n                    return [\n                        this.getOffsetForAlignment(centerOffset, align),\n                        align\n                    ];\n                case \"end\":\n                    return [\n                        this.getOffsetForAlignment(item.end + this.options.scrollPaddingEnd, align),\n                        align\n                    ];\n                default:\n                    return [\n                        this.getOffsetForAlignment(item.start - this.options.scrollPaddingStart, align),\n                        align\n                    ];\n            }\n        };\n        this.isDynamicMode = ()=>this.elementsCache.size > 0;\n        this.cancelScrollToIndex = ()=>{\n            if (this.scrollToIndexTimeoutId !== null && this.targetWindow) {\n                this.targetWindow.clearTimeout(this.scrollToIndexTimeoutId);\n                this.scrollToIndexTimeoutId = null;\n            }\n        };\n        this.scrollToOffset = (toOffset, { align = \"start\", behavior } = {})=>{\n            this.cancelScrollToIndex();\n            if (behavior === \"smooth\" && this.isDynamicMode()) {\n                console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n            }\n            this._scrollToOffset(this.getOffsetForAlignment(toOffset, align), {\n                adjustments: void 0,\n                behavior\n            });\n        };\n        this.scrollToIndex = (index, { align: initialAlign = \"auto\", behavior } = {})=>{\n            index = Math.max(0, Math.min(index, this.options.count - 1));\n            this.cancelScrollToIndex();\n            if (behavior === \"smooth\" && this.isDynamicMode()) {\n                console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n            }\n            const offsetAndAlign = this.getOffsetForIndex(index, initialAlign);\n            if (!offsetAndAlign) return;\n            const [offset, align] = offsetAndAlign;\n            this._scrollToOffset(offset, {\n                adjustments: void 0,\n                behavior\n            });\n            if (behavior !== \"smooth\" && this.isDynamicMode() && this.targetWindow) {\n                this.scrollToIndexTimeoutId = this.targetWindow.setTimeout(()=>{\n                    this.scrollToIndexTimeoutId = null;\n                    const elementInDOM = this.elementsCache.has(this.options.getItemKey(index));\n                    if (elementInDOM) {\n                        const [latestOffset] = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.notUndefined)(this.getOffsetForIndex(index, align));\n                        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.approxEqual)(latestOffset, this.getScrollOffset())) {\n                            this.scrollToIndex(index, {\n                                align,\n                                behavior\n                            });\n                        }\n                    } else {\n                        this.scrollToIndex(index, {\n                            align,\n                            behavior\n                        });\n                    }\n                });\n            }\n        };\n        this.scrollBy = (delta, { behavior } = {})=>{\n            this.cancelScrollToIndex();\n            if (behavior === \"smooth\" && this.isDynamicMode()) {\n                console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n            }\n            this._scrollToOffset(this.getScrollOffset() + delta, {\n                adjustments: void 0,\n                behavior\n            });\n        };\n        this.getTotalSize = ()=>{\n            var _a;\n            const measurements = this.getMeasurements();\n            let end;\n            if (measurements.length === 0) {\n                end = this.options.paddingStart;\n            } else {\n                end = this.options.lanes === 1 ? ((_a = measurements[measurements.length - 1]) == null ? void 0 : _a.end) ?? 0 : Math.max(...measurements.slice(-this.options.lanes).map((m)=>m.end));\n            }\n            return Math.max(end - this.options.scrollMargin + this.options.paddingEnd, 0);\n        };\n        this._scrollToOffset = (offset, { adjustments, behavior })=>{\n            this.options.scrollToFn(offset, {\n                behavior,\n                adjustments\n            }, this);\n        };\n        this.measure = ()=>{\n            this.itemSizeCache = /* @__PURE__ */ new Map();\n            this.notify(false);\n        };\n        this.setOptions(opts);\n    }\n}\nconst findNearestBinarySearch = (low, high, getCurrentValue, value)=>{\n    while(low <= high){\n        const middle = (low + high) / 2 | 0;\n        const currentValue = getCurrentValue(middle);\n        if (currentValue < value) {\n            low = middle + 1;\n        } else if (currentValue > value) {\n            high = middle - 1;\n        } else {\n            return middle;\n        }\n    }\n    if (low > 0) {\n        return low - 1;\n    } else {\n        return 0;\n    }\n};\nfunction calculateRange({ measurements, outerSize, scrollOffset }) {\n    const count = measurements.length - 1;\n    const getOffset = (index)=>measurements[index].start;\n    const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset);\n    let endIndex = startIndex;\n    while(endIndex < count && measurements[endIndex].end < scrollOffset + outerSize){\n        endIndex++;\n    }\n    return {\n        startIndex,\n        endIndex\n    };\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3ZpcnR1YWwtY29yZS9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBdUU7QUFDdkUsTUFBTUksc0JBQXNCLENBQUNDLFFBQVVBO0FBQ3ZDLE1BQU1DLHdCQUF3QixDQUFDQztJQUM3QixNQUFNQyxRQUFRQyxLQUFLQyxHQUFHLENBQUNILE1BQU1JLFVBQVUsR0FBR0osTUFBTUssUUFBUSxFQUFFO0lBQzFELE1BQU1DLE1BQU1KLEtBQUtLLEdBQUcsQ0FBQ1AsTUFBTVEsUUFBUSxHQUFHUixNQUFNSyxRQUFRLEVBQUVMLE1BQU1TLEtBQUssR0FBRztJQUNwRSxNQUFNQyxNQUFNLEVBQUU7SUFDZCxJQUFLLElBQUlDLElBQUlWLE9BQU9VLEtBQUtMLEtBQUtLLElBQUs7UUFDakNELElBQUlFLElBQUksQ0FBQ0Q7SUFDWDtJQUNBLE9BQU9EO0FBQ1Q7QUFDQSxNQUFNRyxxQkFBcUIsQ0FBQ0MsVUFBVUM7SUFDcEMsTUFBTUMsVUFBVUYsU0FBU0csYUFBYTtJQUN0QyxJQUFJLENBQUNELFNBQVM7UUFDWjtJQUNGO0lBQ0EsTUFBTUUsZUFBZUosU0FBU0ksWUFBWTtJQUMxQyxJQUFJLENBQUNBLGNBQWM7UUFDakI7SUFDRjtJQUNBLE1BQU1DLFVBQVUsQ0FBQ0M7UUFDZixNQUFNLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFLEdBQUdGO1FBQzFCTCxHQUFHO1lBQUVNLE9BQU9uQixLQUFLcUIsS0FBSyxDQUFDRjtZQUFRQyxRQUFRcEIsS0FBS3FCLEtBQUssQ0FBQ0Q7UUFBUTtJQUM1RDtJQUNBSCxRQUFRSCxRQUFRUSxxQkFBcUI7SUFDckMsSUFBSSxDQUFDTixhQUFhTyxjQUFjLEVBQUU7UUFDaEMsT0FBTyxLQUNQO0lBQ0Y7SUFDQSxNQUFNQyxXQUFXLElBQUlSLGFBQWFPLGNBQWMsQ0FBQyxDQUFDRTtRQUNoRCxNQUFNQyxRQUFRRCxPQUFPLENBQUMsRUFBRTtR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QyxJQUFHLElBQUssSUFBSTtRQUNsQyxNQUFNRyxlQUFlRixnQkFBZ0JDO1FBQ3JDLElBQUlDLGVBQWVsSCxPQUFPO1lBQ3hCOEcsTUFBTUcsU0FBUztRQUNqQixPQUFPLElBQUlDLGVBQWVsSCxPQUFPO1lBQy9CK0csT0FBT0UsU0FBUztRQUNsQixPQUFPO1lBQ0wsT0FBT0E7UUFDVDtJQUNGO0lBQ0EsSUFBSUgsTUFBTSxHQUFHO1FBQ1gsT0FBT0EsTUFBTTtJQUNmLE9BQU87UUFDTCxPQUFPO0lBQ1Q7QUFDRjtBQUNBLFNBQVMxRixlQUFlLEVBQ3RCaUIsWUFBWSxFQUNad0IsU0FBUyxFQUNUM0UsWUFBWSxFQUNiO0lBQ0MsTUFBTXBFLFFBQVF1SCxhQUFha0IsTUFBTSxHQUFHO0lBQ3BDLE1BQU00RCxZQUFZLENBQUNoTixRQUFVa0ksWUFBWSxDQUFDbEksTUFBTSxDQUFDRyxLQUFLO0lBQ3RELE1BQU1HLGFBQWE0Syx3QkFBd0IsR0FBR3ZLLE9BQU9xTSxXQUFXakk7SUFDaEUsSUFBSXJFLFdBQVdKO0lBQ2YsTUFBT0ksV0FBV0MsU0FBU3VILFlBQVksQ0FBQ3hILFNBQVMsQ0FBQ0YsR0FBRyxHQUFHdUUsZUFBZTJFLFVBQVc7UUFDaEZoSjtJQUNGO0lBQ0EsT0FBTztRQUFFSjtRQUFZSTtJQUFTO0FBQ2hDO0FBZ0JFLENBQ0YsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS12aXotcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3ZpcnR1YWwtY29yZS9kaXN0L2VzbS9pbmRleC5qcz9iNjlhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlYm91bmNlLCBtZW1vLCBub3RVbmRlZmluZWQsIGFwcHJveEVxdWFsIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmNvbnN0IGRlZmF1bHRLZXlFeHRyYWN0b3IgPSAoaW5kZXgpID0+IGluZGV4O1xuY29uc3QgZGVmYXVsdFJhbmdlRXh0cmFjdG9yID0gKHJhbmdlKSA9PiB7XG4gIGNvbnN0IHN0YXJ0ID0gTWF0aC5tYXgocmFuZ2Uuc3RhcnRJbmRleCAtIHJhbmdlLm92ZXJzY2FuLCAwKTtcbiAgY29uc3QgZW5kID0gTWF0aC5taW4ocmFuZ2UuZW5kSW5kZXggKyByYW5nZS5vdmVyc2NhbiwgcmFuZ2UuY291bnQgLSAxKTtcbiAgY29uc3QgYXJyID0gW107XG4gIGZvciAobGV0IGkgPSBzdGFydDsgaSA8PSBlbmQ7IGkrKykge1xuICAgIGFyci5wdXNoKGkpO1xuICB9XG4gIHJldHVybiBhcnI7XG59O1xuY29uc3Qgb2JzZXJ2ZUVsZW1lbnRSZWN0ID0gKGluc3RhbmNlLCBjYikgPT4ge1xuICBjb25zdCBlbGVtZW50ID0gaW5zdGFuY2Uuc2Nyb2xsRWxlbWVudDtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHRhcmdldFdpbmRvdyA9IGluc3RhbmNlLnRhcmdldFdpbmRvdztcbiAgaWYgKCF0YXJnZXRXaW5kb3cpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgaGFuZGxlciA9IChyZWN0KSA9PiB7XG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSByZWN0O1xuICAgIGNiKHsgd2lkdGg6IE1hdGgucm91bmQod2lkdGgpLCBoZWlnaHQ6IE1hdGgucm91bmQoaGVpZ2h0KSB9KTtcbiAgfTtcbiAgaGFuZGxlcihlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcbiAgaWYgKCF0YXJnZXRXaW5kb3cuUmVzaXplT2JzZXJ2ZXIpIHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgIH07XG4gIH1cbiAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgdGFyZ2V0V2luZG93LlJlc2l6ZU9ic2VydmVyKChlbnRyaWVzKSA9PiB7XG4gICAgY29uc3QgZW50cnkgPSBlbnRyaWVzWzBdO1xuICAgIGlmIChlbnRyeSA9PSBudWxsID8gdm9pZCAwIDogZW50cnkuYm9yZGVyQm94U2l6ZSkge1xuICAgICAgY29uc3QgYm94ID0gZW50cnkuYm9yZGVyQm94U2l6ZVswXTtcbiAgICAgIGlmIChib3gpIHtcbiAgICAgICAgaGFuZGxlcih7IHdpZHRoOiBib3guaW5saW5lU2l6ZSwgaGVpZ2h0OiBib3guYmxvY2tTaXplIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGhhbmRsZXIoZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSk7XG4gIH0pO1xuICBvYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQsIHsgYm94OiBcImJvcmRlci1ib3hcIiB9KTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBvYnNlcnZlci51bm9ic2VydmUoZWxlbWVudCk7XG4gIH07XG59O1xuY29uc3QgYWRkRXZlbnRMaXN0ZW5lck9wdGlvbnMgPSB7XG4gIHBhc3NpdmU6IHRydWVcbn07XG5jb25zdCBvYnNlcnZlV2luZG93UmVjdCA9IChpbnN0YW5jZSwgY2IpID0+IHtcbiAgY29uc3QgZWxlbWVudCA9IGluc3RhbmNlLnNjcm9sbEVsZW1lbnQ7XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBoYW5kbGVyID0gKCkgPT4ge1xuICAgIGNiKHsgd2lkdGg6IGVsZW1lbnQuaW5uZXJXaWR0aCwgaGVpZ2h0OiBlbGVtZW50LmlubmVySGVpZ2h0IH0pO1xuICB9O1xuICBoYW5kbGVyKCk7XG4gIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBoYW5kbGVyLCBhZGRFdmVudExpc3RlbmVyT3B0aW9ucyk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGhhbmRsZXIpO1xuICB9O1xufTtcbmNvbnN0IHN1cHBvcnRzU2Nyb2xsZW5kID0gdHlwZW9mIHdpbmRvdyA9PSBcInVuZGVmaW5lZFwiID8gdHJ1ZSA6IFwib25zY3JvbGxlbmRcIiBpbiB3aW5kb3c7XG5jb25zdCBvYnNlcnZlRWxlbWVudE9mZnNldCA9IChpbnN0YW5jZSwgY2IpID0+IHtcbiAgY29uc3QgZWxlbWVudCA9IGluc3RhbmNlLnNjcm9sbEVsZW1lbnQ7XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB0YXJnZXRXaW5kb3cgPSBpbnN0YW5jZS50YXJnZXRXaW5kb3c7XG4gIGlmICghdGFyZ2V0V2luZG93KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBvZmZzZXQgPSAwO1xuICBjb25zdCBmYWxsYmFjayA9IGluc3RhbmNlLm9wdGlvbnMudXNlU2Nyb2xsZW5kRXZlbnQgJiYgc3VwcG9ydHNTY3JvbGxlbmQgPyAoKSA9PiB2b2lkIDAgOiBkZWJvdW5jZShcbiAgICB0YXJnZXRXaW5kb3csXG4gICAgKCkgPT4ge1xuICAgICAgY2Iob2Zmc2V0LCBmYWxzZSk7XG4gICAgfSxcbiAgICBpbnN0YW5jZS5vcHRpb25zLmlzU2Nyb2xsaW5nUmVzZXREZWxheVxuICApO1xuICBjb25zdCBjcmVhdGVIYW5kbGVyID0gKGlzU2Nyb2xsaW5nKSA9PiAoKSA9PiB7XG4gICAgY29uc3QgeyBob3Jpem9udGFsLCBpc1J0bCB9ID0gaW5zdGFuY2Uub3B0aW9ucztcbiAgICBvZmZzZXQgPSBob3Jpem9udGFsID8gZWxlbWVudFtcInNjcm9sbExlZnRcIl0gKiAoaXNSdGwgJiYgLTEgfHwgMSkgOiBlbGVtZW50W1wic2Nyb2xsVG9wXCJdO1xuICAgIGZhbGxiYWNrKCk7XG4gICAgY2Iob2Zmc2V0LCBpc1Njcm9sbGluZyk7XG4gIH07XG4gIGNvbnN0IGhhbmRsZXIgPSBjcmVhdGVIYW5kbGVyKHRydWUpO1xuICBjb25zdCBlbmRIYW5kbGVyID0gY3JlYXRlSGFuZGxlcihmYWxzZSk7XG4gIGVuZEhhbmRsZXIoKTtcbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIGhhbmRsZXIsIGFkZEV2ZW50TGlzdGVuZXJPcHRpb25zKTtcbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsZW5kXCIsIGVuZEhhbmRsZXIsIGFkZEV2ZW50TGlzdGVuZXJPcHRpb25zKTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgaGFuZGxlcik7XG4gICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsZW5kXCIsIGVuZEhhbmRsZXIpO1xuICB9O1xufTtcbmNvbnN0IG9ic2VydmVXaW5kb3dPZmZzZXQgPSAoaW5zdGFuY2UsIGNiKSA9PiB7XG4gIGNvbnN0IGVsZW1lbnQgPSBpbnN0YW5jZS5zY3JvbGxFbGVtZW50O1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgdGFyZ2V0V2luZG93ID0gaW5zdGFuY2UudGFyZ2V0V2luZG93O1xuICBpZiAoIXRhcmdldFdpbmRvdykge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgb2Zmc2V0ID0gMDtcbiAgY29uc3QgZmFsbGJhY2sgPSBpbnN0YW5jZS5vcHRpb25zLnVzZVNjcm9sbGVuZEV2ZW50ICYmIHN1cHBvcnRzU2Nyb2xsZW5kID8gKCkgPT4gdm9pZCAwIDogZGVib3VuY2UoXG4gICAgdGFyZ2V0V2luZG93LFxuICAgICgpID0+IHtcbiAgICAgIGNiKG9mZnNldCwgZmFsc2UpO1xuICAgIH0sXG4gICAgaW5zdGFuY2Uub3B0aW9ucy5pc1Njcm9sbGluZ1Jlc2V0RGVsYXlcbiAgKTtcbiAgY29uc3QgY3JlYXRlSGFuZGxlciA9IChpc1Njcm9sbGluZykgPT4gKCkgPT4ge1xuICAgIG9mZnNldCA9IGVsZW1lbnRbaW5zdGFuY2Uub3B0aW9ucy5ob3Jpem9udGFsID8gXCJzY3JvbGxYXCIgOiBcInNjcm9sbFlcIl07XG4gICAgZmFsbGJhY2soKTtcbiAgICBjYihvZmZzZXQsIGlzU2Nyb2xsaW5nKTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlciA9IGNyZWF0ZUhhbmRsZXIodHJ1ZSk7XG4gIGNvbnN0IGVuZEhhbmRsZXIgPSBjcmVhdGVIYW5kbGVyKGZhbHNlKTtcbiAgZW5kSGFuZGxlcigpO1xuICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgaGFuZGxlciwgYWRkRXZlbnRMaXN0ZW5lck9wdGlvbnMpO1xuICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxlbmRcIiwgZW5kSGFuZGxlciwgYWRkRXZlbnRMaXN0ZW5lck9wdGlvbnMpO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBoYW5kbGVyKTtcbiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxlbmRcIiwgZW5kSGFuZGxlcik7XG4gIH07XG59O1xuY29uc3QgbWVhc3VyZUVsZW1lbnQgPSAoZWxlbWVudCwgZW50cnksIGluc3RhbmNlKSA9PiB7XG4gIGlmIChlbnRyeSA9PSBudWxsID8gdm9pZCAwIDogZW50cnkuYm9yZGVyQm94U2l6ZSkge1xuICAgIGNvbnN0IGJveCA9IGVudHJ5LmJvcmRlckJveFNpemVbMF07XG4gICAgaWYgKGJveCkge1xuICAgICAgY29uc3Qgc2l6ZSA9IE1hdGgucm91bmQoXG4gICAgICAgIGJveFtpbnN0YW5jZS5vcHRpb25zLmhvcml6b250YWwgPyBcImlubGluZVNpemVcIiA6IFwiYmxvY2tTaXplXCJdXG4gICAgICApO1xuICAgICAgcmV0dXJuIHNpemU7XG4gICAgfVxuICB9XG4gIHJldHVybiBNYXRoLnJvdW5kKFxuICAgIGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbaW5zdGFuY2Uub3B0aW9ucy5ob3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl1cbiAgKTtcbn07XG5jb25zdCB3aW5kb3dTY3JvbGwgPSAob2Zmc2V0LCB7XG4gIGFkanVzdG1lbnRzID0gMCxcbiAgYmVoYXZpb3Jcbn0sIGluc3RhbmNlKSA9PiB7XG4gIHZhciBfYSwgX2I7XG4gIGNvbnN0IHRvT2Zmc2V0ID0gb2Zmc2V0ICsgYWRqdXN0bWVudHM7XG4gIChfYiA9IChfYSA9IGluc3RhbmNlLnNjcm9sbEVsZW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfYS5zY3JvbGxUbykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHtcbiAgICBbaW5zdGFuY2Uub3B0aW9ucy5ob3Jpem9udGFsID8gXCJsZWZ0XCIgOiBcInRvcFwiXTogdG9PZmZzZXQsXG4gICAgYmVoYXZpb3JcbiAgfSk7XG59O1xuY29uc3QgZWxlbWVudFNjcm9sbCA9IChvZmZzZXQsIHtcbiAgYWRqdXN0bWVudHMgPSAwLFxuICBiZWhhdmlvclxufSwgaW5zdGFuY2UpID0+IHtcbiAgdmFyIF9hLCBfYjtcbiAgY29uc3QgdG9PZmZzZXQgPSBvZmZzZXQgKyBhZGp1c3RtZW50cztcbiAgKF9iID0gKF9hID0gaW5zdGFuY2Uuc2Nyb2xsRWxlbWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnNjcm9sbFRvKSA9PSBudWxsID8gdm9pZCAwIDogX2IuY2FsbChfYSwge1xuICAgIFtpbnN0YW5jZS5vcHRpb25zLmhvcml6b250YWwgPyBcImxlZnRcIiA6IFwidG9wXCJdOiB0b09mZnNldCxcbiAgICBiZWhhdmlvclxuICB9KTtcbn07XG5jbGFzcyBWaXJ0dWFsaXplciB7XG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICB0aGlzLnVuc3VicyA9IFtdO1xuICAgIHRoaXMuc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gICAgdGhpcy50YXJnZXRXaW5kb3cgPSBudWxsO1xuICAgIHRoaXMuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICB0aGlzLnNjcm9sbFRvSW5kZXhUaW1lb3V0SWQgPSBudWxsO1xuICAgIHRoaXMubWVhc3VyZW1lbnRzQ2FjaGUgPSBbXTtcbiAgICB0aGlzLml0ZW1TaXplQ2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIHRoaXMucGVuZGluZ01lYXN1cmVkQ2FjaGVJbmRleGVzID0gW107XG4gICAgdGhpcy5zY3JvbGxSZWN0ID0gbnVsbDtcbiAgICB0aGlzLnNjcm9sbE9mZnNldCA9IG51bGw7XG4gICAgdGhpcy5zY3JvbGxEaXJlY3Rpb24gPSBudWxsO1xuICAgIHRoaXMuc2Nyb2xsQWRqdXN0bWVudHMgPSAwO1xuICAgIHRoaXMuZWxlbWVudHNDYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgdGhpcy5vYnNlcnZlciA9IC8qIEBfX1BVUkVfXyAqLyAoKCkgPT4ge1xuICAgICAgbGV0IF9ybyA9IG51bGw7XG4gICAgICBjb25zdCBnZXQgPSAoKSA9PiB7XG4gICAgICAgIGlmIChfcm8pIHtcbiAgICAgICAgICByZXR1cm4gX3JvO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy50YXJnZXRXaW5kb3cgfHwgIXRoaXMudGFyZ2V0V2luZG93LlJlc2l6ZU9ic2VydmVyKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9ybyA9IG5ldyB0aGlzLnRhcmdldFdpbmRvdy5SZXNpemVPYnNlcnZlcigoZW50cmllcykgPT4ge1xuICAgICAgICAgIGVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX21lYXN1cmVFbGVtZW50KGVudHJ5LnRhcmdldCwgZW50cnkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXNjb25uZWN0OiAoKSA9PiB7XG4gICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgIChfYSA9IGdldCgpKSA9PSBudWxsID8gdm9pZCAwIDogX2EuZGlzY29ubmVjdCgpO1xuICAgICAgICAgIF9ybyA9IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIG9ic2VydmU6ICh0YXJnZXQpID0+IHtcbiAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgcmV0dXJuIChfYSA9IGdldCgpKSA9PSBudWxsID8gdm9pZCAwIDogX2Eub2JzZXJ2ZSh0YXJnZXQsIHsgYm94OiBcImJvcmRlci1ib3hcIiB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgdW5vYnNlcnZlOiAodGFyZ2V0KSA9PiB7XG4gICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgIHJldHVybiAoX2EgPSBnZXQoKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnVub2JzZXJ2ZSh0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCk7XG4gICAgdGhpcy5yYW5nZSA9IG51bGw7XG4gICAgdGhpcy5zZXRPcHRpb25zID0gKG9wdHMyKSA9PiB7XG4gICAgICBPYmplY3QuZW50cmllcyhvcHRzMikuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpIGRlbGV0ZSBvcHRzMltrZXldO1xuICAgICAgfSk7XG4gICAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgIGRlYnVnOiBmYWxzZSxcbiAgICAgICAgaW5pdGlhbE9mZnNldDogMCxcbiAgICAgICAgb3ZlcnNjYW46IDEsXG4gICAgICAgIHBhZGRpbmdTdGFydDogMCxcbiAgICAgICAgcGFkZGluZ0VuZDogMCxcbiAgICAgICAgc2Nyb2xsUGFkZGluZ1N0YXJ0OiAwLFxuICAgICAgICBzY3JvbGxQYWRkaW5nRW5kOiAwLFxuICAgICAgICBob3Jpem9udGFsOiBmYWxzZSxcbiAgICAgICAgZ2V0SXRlbUtleTogZGVmYXVsdEtleUV4dHJhY3RvcixcbiAgICAgICAgcmFuZ2VFeHRyYWN0b3I6IGRlZmF1bHRSYW5nZUV4dHJhY3RvcixcbiAgICAgICAgb25DaGFuZ2U6ICgpID0+IHtcbiAgICAgICAgfSxcbiAgICAgICAgbWVhc3VyZUVsZW1lbnQsXG4gICAgICAgIGluaXRpYWxSZWN0OiB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAgfSxcbiAgICAgICAgc2Nyb2xsTWFyZ2luOiAwLFxuICAgICAgICBnYXA6IDAsXG4gICAgICAgIGluZGV4QXR0cmlidXRlOiBcImRhdGEtaW5kZXhcIixcbiAgICAgICAgaW5pdGlhbE1lYXN1cmVtZW50c0NhY2hlOiBbXSxcbiAgICAgICAgbGFuZXM6IDEsXG4gICAgICAgIGlzU2Nyb2xsaW5nUmVzZXREZWxheTogMTUwLFxuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBpc1J0bDogZmFsc2UsXG4gICAgICAgIHVzZVNjcm9sbGVuZEV2ZW50OiB0cnVlLFxuICAgICAgICAuLi5vcHRzMlxuICAgICAgfTtcbiAgICB9O1xuICAgIHRoaXMubm90aWZ5ID0gKHN5bmMpID0+IHtcbiAgICAgIHZhciBfYSwgX2I7XG4gICAgICAoX2IgPSAoX2EgPSB0aGlzLm9wdGlvbnMpLm9uQ2hhbmdlKSA9PSBudWxsID8gdm9pZCAwIDogX2IuY2FsbChfYSwgdGhpcywgc3luYyk7XG4gICAgfTtcbiAgICB0aGlzLm1heWJlTm90aWZ5ID0gbWVtbyhcbiAgICAgICgpID0+IHtcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVSYW5nZSgpO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIHRoaXMuaXNTY3JvbGxpbmcsXG4gICAgICAgICAgdGhpcy5yYW5nZSA/IHRoaXMucmFuZ2Uuc3RhcnRJbmRleCA6IG51bGwsXG4gICAgICAgICAgdGhpcy5yYW5nZSA/IHRoaXMucmFuZ2UuZW5kSW5kZXggOiBudWxsXG4gICAgICAgIF07XG4gICAgICB9LFxuICAgICAgKGlzU2Nyb2xsaW5nKSA9PiB7XG4gICAgICAgIHRoaXMubm90aWZ5KGlzU2Nyb2xsaW5nKTtcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIFwibWF5YmVOb3RpZnlcIixcbiAgICAgICAgZGVidWc6ICgpID0+IHRoaXMub3B0aW9ucy5kZWJ1ZyxcbiAgICAgICAgaW5pdGlhbERlcHM6IFtcbiAgICAgICAgICB0aGlzLmlzU2Nyb2xsaW5nLFxuICAgICAgICAgIHRoaXMucmFuZ2UgPyB0aGlzLnJhbmdlLnN0YXJ0SW5kZXggOiBudWxsLFxuICAgICAgICAgIHRoaXMucmFuZ2UgPyB0aGlzLnJhbmdlLmVuZEluZGV4IDogbnVsbFxuICAgICAgICBdXG4gICAgICB9XG4gICAgKTtcbiAgICB0aGlzLmNsZWFudXAgPSAoKSA9PiB7XG4gICAgICB0aGlzLnVuc3Vicy5maWx0ZXIoQm9vbGVhbikuZm9yRWFjaCgoZCkgPT4gZCgpKTtcbiAgICAgIHRoaXMudW5zdWJzID0gW107XG4gICAgICB0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIHRoaXMuc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLnRhcmdldFdpbmRvdyA9IG51bGw7XG4gICAgfTtcbiAgICB0aGlzLl9kaWRNb3VudCA9ICgpID0+IHtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgICAgfTtcbiAgICB9O1xuICAgIHRoaXMuX3dpbGxVcGRhdGUgPSAoKSA9PiB7XG4gICAgICB2YXIgX2E7XG4gICAgICBjb25zdCBzY3JvbGxFbGVtZW50ID0gdGhpcy5vcHRpb25zLmVuYWJsZWQgPyB0aGlzLm9wdGlvbnMuZ2V0U2Nyb2xsRWxlbWVudCgpIDogbnVsbDtcbiAgICAgIGlmICh0aGlzLnNjcm9sbEVsZW1lbnQgIT09IHNjcm9sbEVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5jbGVhbnVwKCk7XG4gICAgICAgIGlmICghc2Nyb2xsRWxlbWVudCkge1xuICAgICAgICAgIHRoaXMubWF5YmVOb3RpZnkoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zY3JvbGxFbGVtZW50ID0gc2Nyb2xsRWxlbWVudDtcbiAgICAgICAgaWYgKHRoaXMuc2Nyb2xsRWxlbWVudCAmJiBcIm93bmVyRG9jdW1lbnRcIiBpbiB0aGlzLnNjcm9sbEVsZW1lbnQpIHtcbiAgICAgICAgICB0aGlzLnRhcmdldFdpbmRvdyA9IHRoaXMuc2Nyb2xsRWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudGFyZ2V0V2luZG93ID0gKChfYSA9IHRoaXMuc2Nyb2xsRWxlbWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLndpbmRvdykgPz8gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVsZW1lbnRzQ2FjaGUuZm9yRWFjaCgoY2FjaGVkKSA9PiB7XG4gICAgICAgICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKGNhY2hlZCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9zY3JvbGxUb09mZnNldCh0aGlzLmdldFNjcm9sbE9mZnNldCgpLCB7XG4gICAgICAgICAgYWRqdXN0bWVudHM6IHZvaWQgMCxcbiAgICAgICAgICBiZWhhdmlvcjogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVuc3Vicy5wdXNoKFxuICAgICAgICAgIHRoaXMub3B0aW9ucy5vYnNlcnZlRWxlbWVudFJlY3QodGhpcywgKHJlY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsUmVjdCA9IHJlY3Q7XG4gICAgICAgICAgICB0aGlzLm1heWJlTm90aWZ5KCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy51bnN1YnMucHVzaChcbiAgICAgICAgICB0aGlzLm9wdGlvbnMub2JzZXJ2ZUVsZW1lbnRPZmZzZXQodGhpcywgKG9mZnNldCwgaXNTY3JvbGxpbmcpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsQWRqdXN0bWVudHMgPSAwO1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxEaXJlY3Rpb24gPSBpc1Njcm9sbGluZyA/IHRoaXMuZ2V0U2Nyb2xsT2Zmc2V0KCkgPCBvZmZzZXQgPyBcImZvcndhcmRcIiA6IFwiYmFja3dhcmRcIiA6IG51bGw7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbE9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgICAgIHRoaXMuaXNTY3JvbGxpbmcgPSBpc1Njcm9sbGluZztcbiAgICAgICAgICAgIHRoaXMubWF5YmVOb3RpZnkoKTtcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5nZXRTaXplID0gKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZW5hYmxlZCkge1xuICAgICAgICB0aGlzLnNjcm9sbFJlY3QgPSBudWxsO1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2Nyb2xsUmVjdCA9IHRoaXMuc2Nyb2xsUmVjdCA/PyB0aGlzLm9wdGlvbnMuaW5pdGlhbFJlY3Q7XG4gICAgICByZXR1cm4gdGhpcy5zY3JvbGxSZWN0W3RoaXMub3B0aW9ucy5ob3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl07XG4gICAgfTtcbiAgICB0aGlzLmdldFNjcm9sbE9mZnNldCA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmVuYWJsZWQpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxPZmZzZXQgPSBudWxsO1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2Nyb2xsT2Zmc2V0ID0gdGhpcy5zY3JvbGxPZmZzZXQgPz8gKHR5cGVvZiB0aGlzLm9wdGlvbnMuaW5pdGlhbE9mZnNldCA9PT0gXCJmdW5jdGlvblwiID8gdGhpcy5vcHRpb25zLmluaXRpYWxPZmZzZXQoKSA6IHRoaXMub3B0aW9ucy5pbml0aWFsT2Zmc2V0KTtcbiAgICAgIHJldHVybiB0aGlzLnNjcm9sbE9mZnNldDtcbiAgICB9O1xuICAgIHRoaXMuZ2V0RnVydGhlc3RNZWFzdXJlbWVudCA9IChtZWFzdXJlbWVudHMsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBmdXJ0aGVzdE1lYXN1cmVtZW50c0ZvdW5kID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICAgIGNvbnN0IGZ1cnRoZXN0TWVhc3VyZW1lbnRzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICAgIGZvciAobGV0IG0gPSBpbmRleCAtIDE7IG0gPj0gMDsgbS0tKSB7XG4gICAgICAgIGNvbnN0IG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW21dO1xuICAgICAgICBpZiAoZnVydGhlc3RNZWFzdXJlbWVudHNGb3VuZC5oYXMobWVhc3VyZW1lbnQubGFuZSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmV2aW91c0Z1cnRoZXN0TWVhc3VyZW1lbnQgPSBmdXJ0aGVzdE1lYXN1cmVtZW50cy5nZXQoXG4gICAgICAgICAgbWVhc3VyZW1lbnQubGFuZVxuICAgICAgICApO1xuICAgICAgICBpZiAocHJldmlvdXNGdXJ0aGVzdE1lYXN1cmVtZW50ID09IG51bGwgfHwgbWVhc3VyZW1lbnQuZW5kID4gcHJldmlvdXNGdXJ0aGVzdE1lYXN1cmVtZW50LmVuZCkge1xuICAgICAgICAgIGZ1cnRoZXN0TWVhc3VyZW1lbnRzLnNldChtZWFzdXJlbWVudC5sYW5lLCBtZWFzdXJlbWVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAobWVhc3VyZW1lbnQuZW5kIDwgcHJldmlvdXNGdXJ0aGVzdE1lYXN1cmVtZW50LmVuZCkge1xuICAgICAgICAgIGZ1cnRoZXN0TWVhc3VyZW1lbnRzRm91bmQuc2V0KG1lYXN1cmVtZW50LmxhbmUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmdXJ0aGVzdE1lYXN1cmVtZW50c0ZvdW5kLnNpemUgPT09IHRoaXMub3B0aW9ucy5sYW5lcykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVydGhlc3RNZWFzdXJlbWVudHMuc2l6ZSA9PT0gdGhpcy5vcHRpb25zLmxhbmVzID8gQXJyYXkuZnJvbShmdXJ0aGVzdE1lYXN1cmVtZW50cy52YWx1ZXMoKSkuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBpZiAoYS5lbmQgPT09IGIuZW5kKSB7XG4gICAgICAgICAgcmV0dXJuIGEuaW5kZXggLSBiLmluZGV4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhLmVuZCAtIGIuZW5kO1xuICAgICAgfSlbMF0gOiB2b2lkIDA7XG4gICAgfTtcbiAgICB0aGlzLmdldE1lYXN1cmVtZW50T3B0aW9ucyA9IG1lbW8oXG4gICAgICAoKSA9PiBbXG4gICAgICAgIHRoaXMub3B0aW9ucy5jb3VudCxcbiAgICAgICAgdGhpcy5vcHRpb25zLnBhZGRpbmdTdGFydCxcbiAgICAgICAgdGhpcy5vcHRpb25zLnNjcm9sbE1hcmdpbixcbiAgICAgICAgdGhpcy5vcHRpb25zLmdldEl0ZW1LZXksXG4gICAgICAgIHRoaXMub3B0aW9ucy5lbmFibGVkXG4gICAgICBdLFxuICAgICAgKGNvdW50LCBwYWRkaW5nU3RhcnQsIHNjcm9sbE1hcmdpbiwgZ2V0SXRlbUtleSwgZW5hYmxlZCkgPT4ge1xuICAgICAgICB0aGlzLnBlbmRpbmdNZWFzdXJlZENhY2hlSW5kZXhlcyA9IFtdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvdW50LFxuICAgICAgICAgIHBhZGRpbmdTdGFydCxcbiAgICAgICAgICBzY3JvbGxNYXJnaW4sXG4gICAgICAgICAgZ2V0SXRlbUtleSxcbiAgICAgICAgICBlbmFibGVkXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6IGZhbHNlXG4gICAgICB9XG4gICAgKTtcbiAgICB0aGlzLmdldE1lYXN1cmVtZW50cyA9IG1lbW8oXG4gICAgICAoKSA9PiBbdGhpcy5nZXRNZWFzdXJlbWVudE9wdGlvbnMoKSwgdGhpcy5pdGVtU2l6ZUNhY2hlXSxcbiAgICAgICh7IGNvdW50LCBwYWRkaW5nU3RhcnQsIHNjcm9sbE1hcmdpbiwgZ2V0SXRlbUtleSwgZW5hYmxlZCB9LCBpdGVtU2l6ZUNhY2hlKSA9PiB7XG4gICAgICAgIGlmICghZW5hYmxlZCkge1xuICAgICAgICAgIHRoaXMubWVhc3VyZW1lbnRzQ2FjaGUgPSBbXTtcbiAgICAgICAgICB0aGlzLml0ZW1TaXplQ2FjaGUuY2xlYXIoKTtcbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubWVhc3VyZW1lbnRzQ2FjaGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5tZWFzdXJlbWVudHNDYWNoZSA9IHRoaXMub3B0aW9ucy5pbml0aWFsTWVhc3VyZW1lbnRzQ2FjaGU7XG4gICAgICAgICAgdGhpcy5tZWFzdXJlbWVudHNDYWNoZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICB0aGlzLml0ZW1TaXplQ2FjaGUuc2V0KGl0ZW0ua2V5LCBpdGVtLnNpemUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1pbiA9IHRoaXMucGVuZGluZ01lYXN1cmVkQ2FjaGVJbmRleGVzLmxlbmd0aCA+IDAgPyBNYXRoLm1pbiguLi50aGlzLnBlbmRpbmdNZWFzdXJlZENhY2hlSW5kZXhlcykgOiAwO1xuICAgICAgICB0aGlzLnBlbmRpbmdNZWFzdXJlZENhY2hlSW5kZXhlcyA9IFtdO1xuICAgICAgICBjb25zdCBtZWFzdXJlbWVudHMgPSB0aGlzLm1lYXN1cmVtZW50c0NhY2hlLnNsaWNlKDAsIG1pbik7XG4gICAgICAgIGZvciAobGV0IGkgPSBtaW47IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgY29uc3Qga2V5ID0gZ2V0SXRlbUtleShpKTtcbiAgICAgICAgICBjb25zdCBmdXJ0aGVzdE1lYXN1cmVtZW50ID0gdGhpcy5vcHRpb25zLmxhbmVzID09PSAxID8gbWVhc3VyZW1lbnRzW2kgLSAxXSA6IHRoaXMuZ2V0RnVydGhlc3RNZWFzdXJlbWVudChtZWFzdXJlbWVudHMsIGkpO1xuICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gZnVydGhlc3RNZWFzdXJlbWVudCA/IGZ1cnRoZXN0TWVhc3VyZW1lbnQuZW5kICsgdGhpcy5vcHRpb25zLmdhcCA6IHBhZGRpbmdTdGFydCArIHNjcm9sbE1hcmdpbjtcbiAgICAgICAgICBjb25zdCBtZWFzdXJlZFNpemUgPSBpdGVtU2l6ZUNhY2hlLmdldChrZXkpO1xuICAgICAgICAgIGNvbnN0IHNpemUgPSB0eXBlb2YgbWVhc3VyZWRTaXplID09PSBcIm51bWJlclwiID8gbWVhc3VyZWRTaXplIDogdGhpcy5vcHRpb25zLmVzdGltYXRlU2l6ZShpKTtcbiAgICAgICAgICBjb25zdCBlbmQgPSBzdGFydCArIHNpemU7XG4gICAgICAgICAgY29uc3QgbGFuZSA9IGZ1cnRoZXN0TWVhc3VyZW1lbnQgPyBmdXJ0aGVzdE1lYXN1cmVtZW50LmxhbmUgOiBpICUgdGhpcy5vcHRpb25zLmxhbmVzO1xuICAgICAgICAgIG1lYXN1cmVtZW50c1tpXSA9IHtcbiAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgICBzaXplLFxuICAgICAgICAgICAgZW5kLFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgbGFuZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tZWFzdXJlbWVudHNDYWNoZSA9IG1lYXN1cmVtZW50cztcbiAgICAgICAgcmV0dXJuIG1lYXN1cmVtZW50cztcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIFwiZ2V0TWVhc3VyZW1lbnRzXCIsXG4gICAgICAgIGRlYnVnOiAoKSA9PiB0aGlzLm9wdGlvbnMuZGVidWdcbiAgICAgIH1cbiAgICApO1xuICAgIHRoaXMuY2FsY3VsYXRlUmFuZ2UgPSBtZW1vKFxuICAgICAgKCkgPT4gW3RoaXMuZ2V0TWVhc3VyZW1lbnRzKCksIHRoaXMuZ2V0U2l6ZSgpLCB0aGlzLmdldFNjcm9sbE9mZnNldCgpXSxcbiAgICAgIChtZWFzdXJlbWVudHMsIG91dGVyU2l6ZSwgc2Nyb2xsT2Zmc2V0KSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhbmdlID0gbWVhc3VyZW1lbnRzLmxlbmd0aCA+IDAgJiYgb3V0ZXJTaXplID4gMCA/IGNhbGN1bGF0ZVJhbmdlKHtcbiAgICAgICAgICBtZWFzdXJlbWVudHMsXG4gICAgICAgICAgb3V0ZXJTaXplLFxuICAgICAgICAgIHNjcm9sbE9mZnNldFxuICAgICAgICB9KSA6IG51bGw7XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBcImNhbGN1bGF0ZVJhbmdlXCIsXG4gICAgICAgIGRlYnVnOiAoKSA9PiB0aGlzLm9wdGlvbnMuZGVidWdcbiAgICAgIH1cbiAgICApO1xuICAgIHRoaXMuZ2V0SW5kZXhlcyA9IG1lbW8oXG4gICAgICAoKSA9PiBbXG4gICAgICAgIHRoaXMub3B0aW9ucy5yYW5nZUV4dHJhY3RvcixcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVSYW5nZSgpLFxuICAgICAgICB0aGlzLm9wdGlvbnMub3ZlcnNjYW4sXG4gICAgICAgIHRoaXMub3B0aW9ucy5jb3VudFxuICAgICAgXSxcbiAgICAgIChyYW5nZUV4dHJhY3RvciwgcmFuZ2UsIG92ZXJzY2FuLCBjb3VudCkgPT4ge1xuICAgICAgICByZXR1cm4gcmFuZ2UgPT09IG51bGwgPyBbXSA6IHJhbmdlRXh0cmFjdG9yKHtcbiAgICAgICAgICBzdGFydEluZGV4OiByYW5nZS5zdGFydEluZGV4LFxuICAgICAgICAgIGVuZEluZGV4OiByYW5nZS5lbmRJbmRleCxcbiAgICAgICAgICBvdmVyc2NhbixcbiAgICAgICAgICBjb3VudFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIFwiZ2V0SW5kZXhlc1wiLFxuICAgICAgICBkZWJ1ZzogKCkgPT4gdGhpcy5vcHRpb25zLmRlYnVnXG4gICAgICB9XG4gICAgKTtcbiAgICB0aGlzLmluZGV4RnJvbUVsZW1lbnQgPSAobm9kZSkgPT4ge1xuICAgICAgY29uc3QgYXR0cmlidXRlTmFtZSA9IHRoaXMub3B0aW9ucy5pbmRleEF0dHJpYnV0ZTtcbiAgICAgIGNvbnN0IGluZGV4U3RyID0gbm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSk7XG4gICAgICBpZiAoIWluZGV4U3RyKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgTWlzc2luZyBhdHRyaWJ1dGUgbmFtZSAnJHthdHRyaWJ1dGVOYW1lfT17aW5kZXh9JyBvbiBtZWFzdXJlZCBlbGVtZW50LmBcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcnNlSW50KGluZGV4U3RyLCAxMCk7XG4gICAgfTtcbiAgICB0aGlzLl9tZWFzdXJlRWxlbWVudCA9IChub2RlLCBlbnRyeSkgPT4ge1xuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmluZGV4RnJvbUVsZW1lbnQobm9kZSk7XG4gICAgICBjb25zdCBpdGVtID0gdGhpcy5tZWFzdXJlbWVudHNDYWNoZVtpbmRleF07XG4gICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qga2V5ID0gaXRlbS5rZXk7XG4gICAgICBjb25zdCBwcmV2Tm9kZSA9IHRoaXMuZWxlbWVudHNDYWNoZS5nZXQoa2V5KTtcbiAgICAgIGlmIChwcmV2Tm9kZSAhPT0gbm9kZSkge1xuICAgICAgICBpZiAocHJldk5vZGUpIHtcbiAgICAgICAgICB0aGlzLm9ic2VydmVyLnVub2JzZXJ2ZShwcmV2Tm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKG5vZGUpO1xuICAgICAgICB0aGlzLmVsZW1lbnRzQ2FjaGUuc2V0KGtleSwgbm9kZSk7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5pc0Nvbm5lY3RlZCkge1xuICAgICAgICB0aGlzLnJlc2l6ZUl0ZW0oaW5kZXgsIHRoaXMub3B0aW9ucy5tZWFzdXJlRWxlbWVudChub2RlLCBlbnRyeSwgdGhpcykpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5yZXNpemVJdGVtID0gKGluZGV4LCBzaXplKSA9PiB7XG4gICAgICBjb25zdCBpdGVtID0gdGhpcy5tZWFzdXJlbWVudHNDYWNoZVtpbmRleF07XG4gICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgaXRlbVNpemUgPSB0aGlzLml0ZW1TaXplQ2FjaGUuZ2V0KGl0ZW0ua2V5KSA/PyBpdGVtLnNpemU7XG4gICAgICBjb25zdCBkZWx0YSA9IHNpemUgLSBpdGVtU2l6ZTtcbiAgICAgIGlmIChkZWx0YSAhPT0gMCkge1xuICAgICAgICBpZiAodGhpcy5zaG91bGRBZGp1c3RTY3JvbGxQb3NpdGlvbk9uSXRlbVNpemVDaGFuZ2UgIT09IHZvaWQgMCA/IHRoaXMuc2hvdWxkQWRqdXN0U2Nyb2xsUG9zaXRpb25Pbkl0ZW1TaXplQ2hhbmdlKGl0ZW0sIGRlbHRhLCB0aGlzKSA6IGl0ZW0uc3RhcnQgPCB0aGlzLmdldFNjcm9sbE9mZnNldCgpICsgdGhpcy5zY3JvbGxBZGp1c3RtZW50cykge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgdGhpcy5vcHRpb25zLmRlYnVnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oXCJjb3JyZWN0aW9uXCIsIGRlbHRhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5fc2Nyb2xsVG9PZmZzZXQodGhpcy5nZXRTY3JvbGxPZmZzZXQoKSwge1xuICAgICAgICAgICAgYWRqdXN0bWVudHM6IHRoaXMuc2Nyb2xsQWRqdXN0bWVudHMgKz0gZGVsdGEsXG4gICAgICAgICAgICBiZWhhdmlvcjogdm9pZCAwXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZW5kaW5nTWVhc3VyZWRDYWNoZUluZGV4ZXMucHVzaChpdGVtLmluZGV4KTtcbiAgICAgICAgdGhpcy5pdGVtU2l6ZUNhY2hlID0gbmV3IE1hcCh0aGlzLml0ZW1TaXplQ2FjaGUuc2V0KGl0ZW0ua2V5LCBzaXplKSk7XG4gICAgICAgIHRoaXMubm90aWZ5KGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMubWVhc3VyZUVsZW1lbnQgPSAobm9kZSkgPT4ge1xuICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNDYWNoZS5mb3JFYWNoKChjYWNoZWQsIGtleSkgPT4ge1xuICAgICAgICAgIGlmICghY2FjaGVkLmlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmVyLnVub2JzZXJ2ZShjYWNoZWQpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50c0NhY2hlLmRlbGV0ZShrZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX21lYXN1cmVFbGVtZW50KG5vZGUsIHZvaWQgMCk7XG4gICAgfTtcbiAgICB0aGlzLmdldFZpcnR1YWxJdGVtcyA9IG1lbW8oXG4gICAgICAoKSA9PiBbdGhpcy5nZXRJbmRleGVzKCksIHRoaXMuZ2V0TWVhc3VyZW1lbnRzKCldLFxuICAgICAgKGluZGV4ZXMsIG1lYXN1cmVtZW50cykgPT4ge1xuICAgICAgICBjb25zdCB2aXJ0dWFsSXRlbXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgayA9IDAsIGxlbiA9IGluZGV4ZXMubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgICAgICBjb25zdCBpID0gaW5kZXhlc1trXTtcbiAgICAgICAgICBjb25zdCBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcbiAgICAgICAgICB2aXJ0dWFsSXRlbXMucHVzaChtZWFzdXJlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZpcnR1YWxJdGVtcztcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIFwiZ2V0VmlydHVhbEl0ZW1zXCIsXG4gICAgICAgIGRlYnVnOiAoKSA9PiB0aGlzLm9wdGlvbnMuZGVidWdcbiAgICAgIH1cbiAgICApO1xuICAgIHRoaXMuZ2V0VmlydHVhbEl0ZW1Gb3JPZmZzZXQgPSAob2Zmc2V0KSA9PiB7XG4gICAgICBjb25zdCBtZWFzdXJlbWVudHMgPSB0aGlzLmdldE1lYXN1cmVtZW50cygpO1xuICAgICAgaWYgKG1lYXN1cmVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub3RVbmRlZmluZWQoXG4gICAgICAgIG1lYXN1cmVtZW50c1tmaW5kTmVhcmVzdEJpbmFyeVNlYXJjaChcbiAgICAgICAgICAwLFxuICAgICAgICAgIG1lYXN1cmVtZW50cy5sZW5ndGggLSAxLFxuICAgICAgICAgIChpbmRleCkgPT4gbm90VW5kZWZpbmVkKG1lYXN1cmVtZW50c1tpbmRleF0pLnN0YXJ0LFxuICAgICAgICAgIG9mZnNldFxuICAgICAgICApXVxuICAgICAgKTtcbiAgICB9O1xuICAgIHRoaXMuZ2V0T2Zmc2V0Rm9yQWxpZ25tZW50ID0gKHRvT2Zmc2V0LCBhbGlnbikgPT4ge1xuICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuZ2V0U2l6ZSgpO1xuICAgICAgY29uc3Qgc2Nyb2xsT2Zmc2V0ID0gdGhpcy5nZXRTY3JvbGxPZmZzZXQoKTtcbiAgICAgIGlmIChhbGlnbiA9PT0gXCJhdXRvXCIpIHtcbiAgICAgICAgaWYgKHRvT2Zmc2V0ID49IHNjcm9sbE9mZnNldCArIHNpemUpIHtcbiAgICAgICAgICBhbGlnbiA9IFwiZW5kXCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChhbGlnbiA9PT0gXCJlbmRcIikge1xuICAgICAgICB0b09mZnNldCAtPSBzaXplO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2Nyb2xsU2l6ZVByb3AgPSB0aGlzLm9wdGlvbnMuaG9yaXpvbnRhbCA/IFwic2Nyb2xsV2lkdGhcIiA6IFwic2Nyb2xsSGVpZ2h0XCI7XG4gICAgICBjb25zdCBzY3JvbGxTaXplID0gdGhpcy5zY3JvbGxFbGVtZW50ID8gXCJkb2N1bWVudFwiIGluIHRoaXMuc2Nyb2xsRWxlbWVudCA/IHRoaXMuc2Nyb2xsRWxlbWVudC5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbc2Nyb2xsU2l6ZVByb3BdIDogdGhpcy5zY3JvbGxFbGVtZW50W3Njcm9sbFNpemVQcm9wXSA6IDA7XG4gICAgICBjb25zdCBtYXhPZmZzZXQgPSBzY3JvbGxTaXplIC0gc2l6ZTtcbiAgICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihtYXhPZmZzZXQsIHRvT2Zmc2V0KSwgMCk7XG4gICAgfTtcbiAgICB0aGlzLmdldE9mZnNldEZvckluZGV4ID0gKGluZGV4LCBhbGlnbiA9IFwiYXV0b1wiKSA9PiB7XG4gICAgICBpbmRleCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGluZGV4LCB0aGlzLm9wdGlvbnMuY291bnQgLSAxKSk7XG4gICAgICBjb25zdCBpdGVtID0gdGhpcy5tZWFzdXJlbWVudHNDYWNoZVtpbmRleF07XG4gICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNpemUgPSB0aGlzLmdldFNpemUoKTtcbiAgICAgIGNvbnN0IHNjcm9sbE9mZnNldCA9IHRoaXMuZ2V0U2Nyb2xsT2Zmc2V0KCk7XG4gICAgICBpZiAoYWxpZ24gPT09IFwiYXV0b1wiKSB7XG4gICAgICAgIGlmIChpdGVtLmVuZCA+PSBzY3JvbGxPZmZzZXQgKyBzaXplIC0gdGhpcy5vcHRpb25zLnNjcm9sbFBhZGRpbmdFbmQpIHtcbiAgICAgICAgICBhbGlnbiA9IFwiZW5kXCI7XG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbS5zdGFydCA8PSBzY3JvbGxPZmZzZXQgKyB0aGlzLm9wdGlvbnMuc2Nyb2xsUGFkZGluZ1N0YXJ0KSB7XG4gICAgICAgICAgYWxpZ24gPSBcInN0YXJ0XCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFtzY3JvbGxPZmZzZXQsIGFsaWduXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgY2VudGVyT2Zmc2V0ID0gaXRlbS5zdGFydCAtIHRoaXMub3B0aW9ucy5zY3JvbGxQYWRkaW5nU3RhcnQgKyAoaXRlbS5zaXplIC0gc2l6ZSkgLyAyO1xuICAgICAgc3dpdGNoIChhbGlnbikge1xuICAgICAgICBjYXNlIFwiY2VudGVyXCI6XG4gICAgICAgICAgcmV0dXJuIFt0aGlzLmdldE9mZnNldEZvckFsaWdubWVudChjZW50ZXJPZmZzZXQsIGFsaWduKSwgYWxpZ25dO1xuICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHRoaXMuZ2V0T2Zmc2V0Rm9yQWxpZ25tZW50KFxuICAgICAgICAgICAgICBpdGVtLmVuZCArIHRoaXMub3B0aW9ucy5zY3JvbGxQYWRkaW5nRW5kLFxuICAgICAgICAgICAgICBhbGlnblxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGFsaWduXG4gICAgICAgICAgXTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgdGhpcy5nZXRPZmZzZXRGb3JBbGlnbm1lbnQoXG4gICAgICAgICAgICAgIGl0ZW0uc3RhcnQgLSB0aGlzLm9wdGlvbnMuc2Nyb2xsUGFkZGluZ1N0YXJ0LFxuICAgICAgICAgICAgICBhbGlnblxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGFsaWduXG4gICAgICAgICAgXTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuaXNEeW5hbWljTW9kZSA9ICgpID0+IHRoaXMuZWxlbWVudHNDYWNoZS5zaXplID4gMDtcbiAgICB0aGlzLmNhbmNlbFNjcm9sbFRvSW5kZXggPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5zY3JvbGxUb0luZGV4VGltZW91dElkICE9PSBudWxsICYmIHRoaXMudGFyZ2V0V2luZG93KSB7XG4gICAgICAgIHRoaXMudGFyZ2V0V2luZG93LmNsZWFyVGltZW91dCh0aGlzLnNjcm9sbFRvSW5kZXhUaW1lb3V0SWQpO1xuICAgICAgICB0aGlzLnNjcm9sbFRvSW5kZXhUaW1lb3V0SWQgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5zY3JvbGxUb09mZnNldCA9ICh0b09mZnNldCwgeyBhbGlnbiA9IFwic3RhcnRcIiwgYmVoYXZpb3IgfSA9IHt9KSA9PiB7XG4gICAgICB0aGlzLmNhbmNlbFNjcm9sbFRvSW5kZXgoKTtcbiAgICAgIGlmIChiZWhhdmlvciA9PT0gXCJzbW9vdGhcIiAmJiB0aGlzLmlzRHluYW1pY01vZGUoKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgXCJUaGUgYHNtb290aGAgc2Nyb2xsIGJlaGF2aW9yIGlzIG5vdCBmdWxseSBzdXBwb3J0ZWQgd2l0aCBkeW5hbWljIHNpemUuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3Njcm9sbFRvT2Zmc2V0KHRoaXMuZ2V0T2Zmc2V0Rm9yQWxpZ25tZW50KHRvT2Zmc2V0LCBhbGlnbiksIHtcbiAgICAgICAgYWRqdXN0bWVudHM6IHZvaWQgMCxcbiAgICAgICAgYmVoYXZpb3JcbiAgICAgIH0pO1xuICAgIH07XG4gICAgdGhpcy5zY3JvbGxUb0luZGV4ID0gKGluZGV4LCB7IGFsaWduOiBpbml0aWFsQWxpZ24gPSBcImF1dG9cIiwgYmVoYXZpb3IgfSA9IHt9KSA9PiB7XG4gICAgICBpbmRleCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGluZGV4LCB0aGlzLm9wdGlvbnMuY291bnQgLSAxKSk7XG4gICAgICB0aGlzLmNhbmNlbFNjcm9sbFRvSW5kZXgoKTtcbiAgICAgIGlmIChiZWhhdmlvciA9PT0gXCJzbW9vdGhcIiAmJiB0aGlzLmlzRHluYW1pY01vZGUoKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgXCJUaGUgYHNtb290aGAgc2Nyb2xsIGJlaGF2aW9yIGlzIG5vdCBmdWxseSBzdXBwb3J0ZWQgd2l0aCBkeW5hbWljIHNpemUuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9mZnNldEFuZEFsaWduID0gdGhpcy5nZXRPZmZzZXRGb3JJbmRleChpbmRleCwgaW5pdGlhbEFsaWduKTtcbiAgICAgIGlmICghb2Zmc2V0QW5kQWxpZ24pIHJldHVybjtcbiAgICAgIGNvbnN0IFtvZmZzZXQsIGFsaWduXSA9IG9mZnNldEFuZEFsaWduO1xuICAgICAgdGhpcy5fc2Nyb2xsVG9PZmZzZXQob2Zmc2V0LCB7IGFkanVzdG1lbnRzOiB2b2lkIDAsIGJlaGF2aW9yIH0pO1xuICAgICAgaWYgKGJlaGF2aW9yICE9PSBcInNtb290aFwiICYmIHRoaXMuaXNEeW5hbWljTW9kZSgpICYmIHRoaXMudGFyZ2V0V2luZG93KSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsVG9JbmRleFRpbWVvdXRJZCA9IHRoaXMudGFyZ2V0V2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuc2Nyb2xsVG9JbmRleFRpbWVvdXRJZCA9IG51bGw7XG4gICAgICAgICAgY29uc3QgZWxlbWVudEluRE9NID0gdGhpcy5lbGVtZW50c0NhY2hlLmhhcyhcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5nZXRJdGVtS2V5KGluZGV4KVxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKGVsZW1lbnRJbkRPTSkge1xuICAgICAgICAgICAgY29uc3QgW2xhdGVzdE9mZnNldF0gPSBub3RVbmRlZmluZWQoXG4gICAgICAgICAgICAgIHRoaXMuZ2V0T2Zmc2V0Rm9ySW5kZXgoaW5kZXgsIGFsaWduKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICghYXBwcm94RXF1YWwobGF0ZXN0T2Zmc2V0LCB0aGlzLmdldFNjcm9sbE9mZnNldCgpKSkge1xuICAgICAgICAgICAgICB0aGlzLnNjcm9sbFRvSW5kZXgoaW5kZXgsIHsgYWxpZ24sIGJlaGF2aW9yIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbFRvSW5kZXgoaW5kZXgsIHsgYWxpZ24sIGJlaGF2aW9yIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLnNjcm9sbEJ5ID0gKGRlbHRhLCB7IGJlaGF2aW9yIH0gPSB7fSkgPT4ge1xuICAgICAgdGhpcy5jYW5jZWxTY3JvbGxUb0luZGV4KCk7XG4gICAgICBpZiAoYmVoYXZpb3IgPT09IFwic21vb3RoXCIgJiYgdGhpcy5pc0R5bmFtaWNNb2RlKCkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIFwiVGhlIGBzbW9vdGhgIHNjcm9sbCBiZWhhdmlvciBpcyBub3QgZnVsbHkgc3VwcG9ydGVkIHdpdGggZHluYW1pYyBzaXplLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zY3JvbGxUb09mZnNldCh0aGlzLmdldFNjcm9sbE9mZnNldCgpICsgZGVsdGEsIHtcbiAgICAgICAgYWRqdXN0bWVudHM6IHZvaWQgMCxcbiAgICAgICAgYmVoYXZpb3JcbiAgICAgIH0pO1xuICAgIH07XG4gICAgdGhpcy5nZXRUb3RhbFNpemUgPSAoKSA9PiB7XG4gICAgICB2YXIgX2E7XG4gICAgICBjb25zdCBtZWFzdXJlbWVudHMgPSB0aGlzLmdldE1lYXN1cmVtZW50cygpO1xuICAgICAgbGV0IGVuZDtcbiAgICAgIGlmIChtZWFzdXJlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGVuZCA9IHRoaXMub3B0aW9ucy5wYWRkaW5nU3RhcnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSB0aGlzLm9wdGlvbnMubGFuZXMgPT09IDEgPyAoKF9hID0gbWVhc3VyZW1lbnRzW21lYXN1cmVtZW50cy5sZW5ndGggLSAxXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmVuZCkgPz8gMCA6IE1hdGgubWF4KFxuICAgICAgICAgIC4uLm1lYXN1cmVtZW50cy5zbGljZSgtdGhpcy5vcHRpb25zLmxhbmVzKS5tYXAoKG0pID0+IG0uZW5kKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE1hdGgubWF4KFxuICAgICAgICBlbmQgLSB0aGlzLm9wdGlvbnMuc2Nyb2xsTWFyZ2luICsgdGhpcy5vcHRpb25zLnBhZGRpbmdFbmQsXG4gICAgICAgIDBcbiAgICAgICk7XG4gICAgfTtcbiAgICB0aGlzLl9zY3JvbGxUb09mZnNldCA9IChvZmZzZXQsIHtcbiAgICAgIGFkanVzdG1lbnRzLFxuICAgICAgYmVoYXZpb3JcbiAgICB9KSA9PiB7XG4gICAgICB0aGlzLm9wdGlvbnMuc2Nyb2xsVG9GbihvZmZzZXQsIHsgYmVoYXZpb3IsIGFkanVzdG1lbnRzIH0sIHRoaXMpO1xuICAgIH07XG4gICAgdGhpcy5tZWFzdXJlID0gKCkgPT4ge1xuICAgICAgdGhpcy5pdGVtU2l6ZUNhY2hlID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICAgIHRoaXMubm90aWZ5KGZhbHNlKTtcbiAgICB9O1xuICAgIHRoaXMuc2V0T3B0aW9ucyhvcHRzKTtcbiAgfVxufVxuY29uc3QgZmluZE5lYXJlc3RCaW5hcnlTZWFyY2ggPSAobG93LCBoaWdoLCBnZXRDdXJyZW50VmFsdWUsIHZhbHVlKSA9PiB7XG4gIHdoaWxlIChsb3cgPD0gaGlnaCkge1xuICAgIGNvbnN0IG1pZGRsZSA9IChsb3cgKyBoaWdoKSAvIDIgfCAwO1xuICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IGdldEN1cnJlbnRWYWx1ZShtaWRkbGUpO1xuICAgIGlmIChjdXJyZW50VmFsdWUgPCB2YWx1ZSkge1xuICAgICAgbG93ID0gbWlkZGxlICsgMTtcbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRWYWx1ZSA+IHZhbHVlKSB7XG4gICAgICBoaWdoID0gbWlkZGxlIC0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1pZGRsZTtcbiAgICB9XG4gIH1cbiAgaWYgKGxvdyA+IDApIHtcbiAgICByZXR1cm4gbG93IC0gMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMDtcbiAgfVxufTtcbmZ1bmN0aW9uIGNhbGN1bGF0ZVJhbmdlKHtcbiAgbWVhc3VyZW1lbnRzLFxuICBvdXRlclNpemUsXG4gIHNjcm9sbE9mZnNldFxufSkge1xuICBjb25zdCBjb3VudCA9IG1lYXN1cmVtZW50cy5sZW5ndGggLSAxO1xuICBjb25zdCBnZXRPZmZzZXQgPSAoaW5kZXgpID0+IG1lYXN1cmVtZW50c1tpbmRleF0uc3RhcnQ7XG4gIGNvbnN0IHN0YXJ0SW5kZXggPSBmaW5kTmVhcmVzdEJpbmFyeVNlYXJjaCgwLCBjb3VudCwgZ2V0T2Zmc2V0LCBzY3JvbGxPZmZzZXQpO1xuICBsZXQgZW5kSW5kZXggPSBzdGFydEluZGV4O1xuICB3aGlsZSAoZW5kSW5kZXggPCBjb3VudCAmJiBtZWFzdXJlbWVudHNbZW5kSW5kZXhdLmVuZCA8IHNjcm9sbE9mZnNldCArIG91dGVyU2l6ZSkge1xuICAgIGVuZEluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHsgc3RhcnRJbmRleCwgZW5kSW5kZXggfTtcbn1cbmV4cG9ydCB7XG4gIFZpcnR1YWxpemVyLFxuICBhcHByb3hFcXVhbCxcbiAgZGVib3VuY2UsXG4gIGRlZmF1bHRLZXlFeHRyYWN0b3IsXG4gIGRlZmF1bHRSYW5nZUV4dHJhY3RvcixcbiAgZWxlbWVudFNjcm9sbCxcbiAgbWVhc3VyZUVsZW1lbnQsXG4gIG1lbW8sXG4gIG5vdFVuZGVmaW5lZCxcbiAgb2JzZXJ2ZUVsZW1lbnRPZmZzZXQsXG4gIG9ic2VydmVFbGVtZW50UmVjdCxcbiAgb2JzZXJ2ZVdpbmRvd09mZnNldCxcbiAgb2JzZXJ2ZVdpbmRvd1JlY3QsXG4gIHdpbmRvd1Njcm9sbFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbImRlYm91bmNlIiwibWVtbyIsIm5vdFVuZGVmaW5lZCIsImFwcHJveEVxdWFsIiwiZGVmYXVsdEtleUV4dHJhY3RvciIsImluZGV4IiwiZGVmYXVsdFJhbmdlRXh0cmFjdG9yIiwicmFuZ2UiLCJzdGFydCIsIk1hdGgiLCJtYXgiLCJzdGFydEluZGV4Iiwib3ZlcnNjYW4iLCJlbmQiLCJtaW4iLCJlbmRJbmRleCIsImNvdW50IiwiYXJyIiwiaSIsInB1c2giLCJvYnNlcnZlRWxlbWVudFJlY3QiLCJpbnN0YW5jZSIsImNiIiwiZWxlbWVudCIsInNjcm9sbEVsZW1lbnQiLCJ0YXJnZXRXaW5kb3ciLCJoYW5kbGVyIiwicmVjdCIsIndpZHRoIiwiaGVpZ2h0Iiwicm91bmQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJSZXNpemVPYnNlcnZlciIsIm9ic2VydmVyIiwiZW50cmllcyIsImVudHJ5IiwiYm9yZGVyQm94U2l6ZSIsImJveCIsImlubGluZVNpemUiLCJibG9ja1NpemUiLCJvYnNlcnZlIiwidW5vYnNlcnZlIiwiYWRkRXZlbnRMaXN0ZW5lck9wdGlvbnMiLCJwYXNzaXZlIiwib2JzZXJ2ZVdpbmRvd1JlY3QiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInN1cHBvcnRzU2Nyb2xsZW5kIiwid2luZG93Iiwib2JzZXJ2ZUVsZW1lbnRPZmZzZXQiLCJvZmZzZXQiLCJmYWxsYmFjayIsIm9wdGlvbnMiLCJ1c2VTY3JvbGxlbmRFdmVudCIsImlzU2Nyb2xsaW5nUmVzZXREZWxheSIsImNyZWF0ZUhhbmRsZXIiLCJpc1Njcm9sbGluZyIsImhvcml6b250YWwiLCJpc1J0bCIsImVuZEhhbmRsZXIiLCJvYnNlcnZlV2luZG93T2Zmc2V0IiwibWVhc3VyZUVsZW1lbnQiLCJzaXplIiwid2luZG93U2Nyb2xsIiwiYWRqdXN0bWVudHMiLCJiZWhhdmlvciIsIl9hIiwiX2IiLCJ0b09mZnNldCIsInNjcm9sbFRvIiwiY2FsbCIsImVsZW1lbnRTY3JvbGwiLCJWaXJ0dWFsaXplciIsImNvbnN0cnVjdG9yIiwib3B0cyIsInVuc3VicyIsInNjcm9sbFRvSW5kZXhUaW1lb3V0SWQiLCJtZWFzdXJlbWVudHNDYWNoZSIsIml0ZW1TaXplQ2FjaGUiLCJNYXAiLCJwZW5kaW5nTWVhc3VyZWRDYWNoZUluZGV4ZXMiLCJzY3JvbGxSZWN0Iiwic2Nyb2xsT2Zmc2V0Iiwic2Nyb2xsRGlyZWN0aW9uIiwic2Nyb2xsQWRqdXN0bWVudHMiLCJlbGVtZW50c0NhY2hlIiwiX3JvIiwiZ2V0IiwiZm9yRWFjaCIsIl9tZWFzdXJlRWxlbWVudCIsInRhcmdldCIsImRpc2Nvbm5lY3QiLCJzZXRPcHRpb25zIiwib3B0czIiLCJPYmplY3QiLCJrZXkiLCJ2YWx1ZSIsImRlYnVnIiwiaW5pdGlhbE9mZnNldCIsInBhZGRpbmdTdGFydCIsInBhZGRpbmdFbmQiLCJzY3JvbGxQYWRkaW5nU3RhcnQiLCJzY3JvbGxQYWRkaW5nRW5kIiwiZ2V0SXRlbUtleSIsInJhbmdlRXh0cmFjdG9yIiwib25DaGFuZ2UiLCJpbml0aWFsUmVjdCIsInNjcm9sbE1hcmdpbiIsImdhcCIsImluZGV4QXR0cmlidXRlIiwiaW5pdGlhbE1lYXN1cmVtZW50c0NhY2hlIiwibGFuZXMiLCJlbmFibGVkIiwibm90aWZ5Iiwic3luYyIsIm1heWJlTm90aWZ5IiwiY2FsY3VsYXRlUmFuZ2UiLCJwcm9jZXNzIiwiaW5pdGlhbERlcHMiLCJjbGVhbnVwIiwiZmlsdGVyIiwiQm9vbGVhbiIsImQiLCJfZGlkTW91bnQiLCJfd2lsbFVwZGF0ZSIsImdldFNjcm9sbEVsZW1lbnQiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJjYWNoZWQiLCJfc2Nyb2xsVG9PZmZzZXQiLCJnZXRTY3JvbGxPZmZzZXQiLCJnZXRTaXplIiwiZ2V0RnVydGhlc3RNZWFzdXJlbWVudCIsIm1lYXN1cmVtZW50cyIsImZ1cnRoZXN0TWVhc3VyZW1lbnRzRm91bmQiLCJmdXJ0aGVzdE1lYXN1cmVtZW50cyIsIm0iLCJtZWFzdXJlbWVudCIsImhhcyIsImxhbmUiLCJwcmV2aW91c0Z1cnRoZXN0TWVhc3VyZW1lbnQiLCJzZXQiLCJBcnJheSIsImZyb20iLCJ2YWx1ZXMiLCJzb3J0IiwiYSIsImIiLCJnZXRNZWFzdXJlbWVudE9wdGlvbnMiLCJnZXRNZWFzdXJlbWVudHMiLCJjbGVhciIsImxlbmd0aCIsIml0ZW0iLCJzbGljZSIsImZ1cnRoZXN0TWVhc3VyZW1lbnQiLCJtZWFzdXJlZFNpemUiLCJlc3RpbWF0ZVNpemUiLCJvdXRlclNpemUiLCJnZXRJbmRleGVzIiwiaW5kZXhGcm9tRWxlbWVudCIsIm5vZGUiLCJhdHRyaWJ1dGVOYW1lIiwiaW5kZXhTdHIiLCJnZXRBdHRyaWJ1dGUiLCJjb25zb2xlIiwid2FybiIsInBhcnNlSW50IiwicHJldk5vZGUiLCJpc0Nvbm5lY3RlZCIsInJlc2l6ZUl0ZW0iLCJpdGVtU2l6ZSIsImRlbHRhIiwic2hvdWxkQWRqdXN0U2Nyb2xsUG9zaXRpb25Pbkl0ZW1TaXplQ2hhbmdlIiwiaW5mbyIsImRlbGV0ZSIsImdldFZpcnR1YWxJdGVtcyIsImluZGV4ZXMiLCJ2aXJ0dWFsSXRlbXMiLCJrIiwibGVuIiwiZ2V0VmlydHVhbEl0ZW1Gb3JPZmZzZXQiLCJmaW5kTmVhcmVzdEJpbmFyeVNlYXJjaCIsImdldE9mZnNldEZvckFsaWdubWVudCIsImFsaWduIiwic2Nyb2xsU2l6ZVByb3AiLCJzY3JvbGxTaXplIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJtYXhPZmZzZXQiLCJnZXRPZmZzZXRGb3JJbmRleCIsImNlbnRlck9mZnNldCIsImlzRHluYW1pY01vZGUiLCJjYW5jZWxTY3JvbGxUb0luZGV4IiwiY2xlYXJUaW1lb3V0Iiwic2Nyb2xsVG9PZmZzZXQiLCJzY3JvbGxUb0luZGV4IiwiaW5pdGlhbEFsaWduIiwib2Zmc2V0QW5kQWxpZ24iLCJzZXRUaW1lb3V0IiwiZWxlbWVudEluRE9NIiwibGF0ZXN0T2Zmc2V0Iiwic2Nyb2xsQnkiLCJnZXRUb3RhbFNpemUiLCJtYXAiLCJzY3JvbGxUb0ZuIiwibWVhc3VyZSIsImxvdyIsImhpZ2giLCJnZXRDdXJyZW50VmFsdWUiLCJtaWRkbGUiLCJjdXJyZW50VmFsdWUiLCJnZXRPZmZzZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/virtual-core/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/virtual-core/dist/esm/utils.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tanstack/virtual-core/dist/esm/utils.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   approxEqual: () => (/* binding */ approxEqual),\n/* harmony export */   debounce: () => (/* binding */ debounce),\n/* harmony export */   memo: () => (/* binding */ memo),\n/* harmony export */   notUndefined: () => (/* binding */ notUndefined)\n/* harmony export */ });\nfunction memo(getDeps, fn, opts) {\n    let deps = opts.initialDeps ?? [];\n    let result;\n    return ()=>{\n        var _a, _b, _c, _d;\n        let depTime;\n        if (opts.key && ((_a = opts.debug) == null ? void 0 : _a.call(opts))) depTime = Date.now();\n        const newDeps = getDeps();\n        const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index)=>deps[index] !== dep);\n        if (!depsChanged) {\n            return result;\n        }\n        deps = newDeps;\n        let resultTime;\n        if (opts.key && ((_b = opts.debug) == null ? void 0 : _b.call(opts))) resultTime = Date.now();\n        result = fn(...newDeps);\n        if (opts.key && ((_c = opts.debug) == null ? void 0 : _c.call(opts))) {\n            const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\n            const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\n            const resultFpsPercentage = resultEndTime / 16;\n            const pad = (str, num)=>{\n                str = String(str);\n                while(str.length < num){\n                    str = \" \" + str;\n                }\n                return str;\n            };\n            console.info(`%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`, `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`, opts == null ? void 0 : opts.key);\n        }\n        (_d = opts == null ? void 0 : opts.onChange) == null ? void 0 : _d.call(opts, result);\n        return result;\n    };\n}\nfunction notUndefined(value, msg) {\n    if (value === void 0) {\n        throw new Error(`Unexpected undefined${msg ? `: ${msg}` : \"\"}`);\n    } else {\n        return value;\n    }\n}\nconst approxEqual = (a, b)=>Math.abs(a - b) < 1;\nconst debounce = (targetWindow, fn, ms)=>{\n    let timeoutId;\n    return function(...args) {\n        targetWindow.clearTimeout(timeoutId);\n        timeoutId = targetWindow.setTimeout(()=>fn.apply(this, args), ms);\n    };\n};\n //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3ZpcnR1YWwtY29yZS9kaXN0L2VzbS91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsU0FBU0EsS0FBS0MsT0FBTyxFQUFFQyxFQUFFLEVBQUVDLElBQUk7SUFDN0IsSUFBSUMsT0FBT0QsS0FBS0UsV0FBVyxJQUFJLEVBQUU7SUFDakMsSUFBSUM7SUFDSixPQUFPO1FBQ0wsSUFBSUMsSUFBSUMsSUFBSUMsSUFBSUM7UUFDaEIsSUFBSUM7UUFDSixJQUFJUixLQUFLUyxHQUFHLElBQUssRUFBQ0wsS0FBS0osS0FBS1UsS0FBSyxLQUFLLE9BQU8sS0FBSyxJQUFJTixHQUFHTyxJQUFJLENBQUNYLEtBQUksR0FBSVEsVUFBVUksS0FBS0MsR0FBRztRQUN4RixNQUFNQyxVQUFVaEI7UUFDaEIsTUFBTWlCLGNBQWNELFFBQVFFLE1BQU0sS0FBS2YsS0FBS2UsTUFBTSxJQUFJRixRQUFRRyxJQUFJLENBQUMsQ0FBQ0MsS0FBS0MsUUFBVWxCLElBQUksQ0FBQ2tCLE1BQU0sS0FBS0Q7UUFDbkcsSUFBSSxDQUFDSCxhQUFhO1lBQ2hCLE9BQU9aO1FBQ1Q7UUFDQUYsT0FBT2E7UUFDUCxJQUFJTTtRQUNKLElBQUlwQixLQUFLUyxHQUFHLElBQUssRUFBQ0osS0FBS0wsS0FBS1UsS0FBSyxLQUFLLE9BQU8sS0FBSyxJQUFJTCxHQUFHTSxJQUFJLENBQUNYLEtBQUksR0FBSW9CLGFBQWFSLEtBQUtDLEdBQUc7UUFDM0ZWLFNBQVNKLE1BQU1lO1FBQ2YsSUFBSWQsS0FBS1MsR0FBRyxJQUFLLEVBQUNILEtBQUtOLEtBQUtVLEtBQUssS0FBSyxPQUFPLEtBQUssSUFBSUosR0FBR0ssSUFBSSxDQUFDWCxLQUFJLEdBQUk7WUFDcEUsTUFBTXFCLGFBQWFDLEtBQUtDLEtBQUssQ0FBQyxDQUFDWCxLQUFLQyxHQUFHLEtBQUtMLE9BQU0sSUFBSyxPQUFPO1lBQzlELE1BQU1nQixnQkFBZ0JGLEtBQUtDLEtBQUssQ0FBQyxDQUFDWCxLQUFLQyxHQUFHLEtBQUtPLFVBQVMsSUFBSyxPQUFPO1lBQ3BFLE1BQU1LLHNCQUFzQkQsZ0JBQWdCO1lBQzVDLE1BQU1FLE1BQU0sQ0FBQ0MsS0FBS0M7Z0JBQ2hCRCxNQUFNRSxPQUFPRjtnQkFDYixNQUFPQSxJQUFJWCxNQUFNLEdBQUdZLElBQUs7b0JBQ3ZCRCxNQUFNLE1BQU1BO2dCQUNkO2dCQUNBLE9BQU9BO1lBQ1Q7WUFDQUcsUUFBUUMsSUFBSSxDQUNWLENBQUMsSUFBSSxFQUFFTCxJQUFJRixlQUFlLEdBQUcsRUFBRSxFQUFFRSxJQUFJTCxZQUFZLEdBQUcsR0FBRyxDQUFDLEVBQ3hELENBQUM7Ozt1QkFHYyxFQUFFQyxLQUFLVSxHQUFHLENBQ3ZCLEdBQ0FWLEtBQUtXLEdBQUcsQ0FBQyxNQUFNLE1BQU1SLHFCQUFxQixNQUMxQyxjQUFjLENBQUMsRUFDakJ6QixRQUFRLE9BQU8sS0FBSyxJQUFJQSxLQUFLUyxHQUFHO1FBRXBDO1FBQ0NGLENBQUFBLEtBQUtQLFFBQVEsT0FBTyxLQUFLLElBQUlBLEtBQUtrQyxRQUFRLEtBQUssT0FBTyxLQUFLLElBQUkzQixHQUFHSSxJQUFJLENBQUNYLE1BQU1HO1FBQzlFLE9BQU9BO0lBQ1Q7QUFDRjtBQUNBLFNBQVNnQyxhQUFhQyxLQUFLLEVBQUVDLEdBQUc7SUFDOUIsSUFBSUQsVUFBVSxLQUFLLEdBQUc7UUFDcEIsTUFBTSxJQUFJRSxNQUFNLENBQUMsb0JBQW9CLEVBQUVELE1BQU0sQ0FBQyxFQUFFLEVBQUVBLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUNoRSxPQUFPO1FBQ0wsT0FBT0Q7SUFDVDtBQUNGO0FBQ0EsTUFBTUcsY0FBYyxDQUFDQyxHQUFHQyxJQUFNbkIsS0FBS29CLEdBQUcsQ0FBQ0YsSUFBSUMsS0FBSztBQUNoRCxNQUFNRSxXQUFXLENBQUNDLGNBQWM3QyxJQUFJOEM7SUFDbEMsSUFBSUM7SUFDSixPQUFPLFNBQVMsR0FBR0MsSUFBSTtRQUNyQkgsYUFBYUksWUFBWSxDQUFDRjtRQUMxQkEsWUFBWUYsYUFBYUssVUFBVSxDQUFDLElBQU1sRCxHQUFHbUQsS0FBSyxDQUFDLElBQUksRUFBRUgsT0FBT0Y7SUFDbEU7QUFDRjtBQU1FLENBQ0YsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS12aXotcGxhdGZvcm0vLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3ZpcnR1YWwtY29yZS9kaXN0L2VzbS91dGlscy5qcz80OTcyIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIG1lbW8oZ2V0RGVwcywgZm4sIG9wdHMpIHtcbiAgbGV0IGRlcHMgPSBvcHRzLmluaXRpYWxEZXBzID8/IFtdO1xuICBsZXQgcmVzdWx0O1xuICByZXR1cm4gKCkgPT4ge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICBsZXQgZGVwVGltZTtcbiAgICBpZiAob3B0cy5rZXkgJiYgKChfYSA9IG9wdHMuZGVidWcpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYWxsKG9wdHMpKSkgZGVwVGltZSA9IERhdGUubm93KCk7XG4gICAgY29uc3QgbmV3RGVwcyA9IGdldERlcHMoKTtcbiAgICBjb25zdCBkZXBzQ2hhbmdlZCA9IG5ld0RlcHMubGVuZ3RoICE9PSBkZXBzLmxlbmd0aCB8fCBuZXdEZXBzLnNvbWUoKGRlcCwgaW5kZXgpID0+IGRlcHNbaW5kZXhdICE9PSBkZXApO1xuICAgIGlmICghZGVwc0NoYW5nZWQpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGRlcHMgPSBuZXdEZXBzO1xuICAgIGxldCByZXN1bHRUaW1lO1xuICAgIGlmIChvcHRzLmtleSAmJiAoKF9iID0gb3B0cy5kZWJ1ZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwob3B0cykpKSByZXN1bHRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICByZXN1bHQgPSBmbiguLi5uZXdEZXBzKTtcbiAgICBpZiAob3B0cy5rZXkgJiYgKChfYyA9IG9wdHMuZGVidWcpID09IG51bGwgPyB2b2lkIDAgOiBfYy5jYWxsKG9wdHMpKSkge1xuICAgICAgY29uc3QgZGVwRW5kVGltZSA9IE1hdGgucm91bmQoKERhdGUubm93KCkgLSBkZXBUaW1lKSAqIDEwMCkgLyAxMDA7XG4gICAgICBjb25zdCByZXN1bHRFbmRUaW1lID0gTWF0aC5yb3VuZCgoRGF0ZS5ub3coKSAtIHJlc3VsdFRpbWUpICogMTAwKSAvIDEwMDtcbiAgICAgIGNvbnN0IHJlc3VsdEZwc1BlcmNlbnRhZ2UgPSByZXN1bHRFbmRUaW1lIC8gMTY7XG4gICAgICBjb25zdCBwYWQgPSAoc3RyLCBudW0pID0+IHtcbiAgICAgICAgc3RyID0gU3RyaW5nKHN0cik7XG4gICAgICAgIHdoaWxlIChzdHIubGVuZ3RoIDwgbnVtKSB7XG4gICAgICAgICAgc3RyID0gXCIgXCIgKyBzdHI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgIH07XG4gICAgICBjb25zb2xlLmluZm8oXG4gICAgICAgIGAlY+KPsSAke3BhZChyZXN1bHRFbmRUaW1lLCA1KX0gLyR7cGFkKGRlcEVuZFRpbWUsIDUpfSBtc2AsXG4gICAgICAgIGBcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogLjZyZW07XG4gICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgIGNvbG9yOiBoc2woJHtNYXRoLm1heChcbiAgICAgICAgICAwLFxuICAgICAgICAgIE1hdGgubWluKDEyMCAtIDEyMCAqIHJlc3VsdEZwc1BlcmNlbnRhZ2UsIDEyMClcbiAgICAgICAgKX1kZWcgMTAwJSAzMSUpO2AsXG4gICAgICAgIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMua2V5XG4gICAgICApO1xuICAgIH1cbiAgICAoX2QgPSBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLm9uQ2hhbmdlKSA9PSBudWxsID8gdm9pZCAwIDogX2QuY2FsbChvcHRzLCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5mdW5jdGlvbiBub3RVbmRlZmluZWQodmFsdWUsIG1zZykge1xuICBpZiAodmFsdWUgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCB1bmRlZmluZWQke21zZyA/IGA6ICR7bXNnfWAgOiBcIlwifWApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuY29uc3QgYXBwcm94RXF1YWwgPSAoYSwgYikgPT4gTWF0aC5hYnMoYSAtIGIpIDwgMTtcbmNvbnN0IGRlYm91bmNlID0gKHRhcmdldFdpbmRvdywgZm4sIG1zKSA9PiB7XG4gIGxldCB0aW1lb3V0SWQ7XG4gIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgdGFyZ2V0V2luZG93LmNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgIHRpbWVvdXRJZCA9IHRhcmdldFdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IGZuLmFwcGx5KHRoaXMsIGFyZ3MpLCBtcyk7XG4gIH07XG59O1xuZXhwb3J0IHtcbiAgYXBwcm94RXF1YWwsXG4gIGRlYm91bmNlLFxuICBtZW1vLFxuICBub3RVbmRlZmluZWRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJtZW1vIiwiZ2V0RGVwcyIsImZuIiwib3B0cyIsImRlcHMiLCJpbml0aWFsRGVwcyIsInJlc3VsdCIsIl9hIiwiX2IiLCJfYyIsIl9kIiwiZGVwVGltZSIsImtleSIsImRlYnVnIiwiY2FsbCIsIkRhdGUiLCJub3ciLCJuZXdEZXBzIiwiZGVwc0NoYW5nZWQiLCJsZW5ndGgiLCJzb21lIiwiZGVwIiwiaW5kZXgiLCJyZXN1bHRUaW1lIiwiZGVwRW5kVGltZSIsIk1hdGgiLCJyb3VuZCIsInJlc3VsdEVuZFRpbWUiLCJyZXN1bHRGcHNQZXJjZW50YWdlIiwicGFkIiwic3RyIiwibnVtIiwiU3RyaW5nIiwiY29uc29sZSIsImluZm8iLCJtYXgiLCJtaW4iLCJvbkNoYW5nZSIsIm5vdFVuZGVmaW5lZCIsInZhbHVlIiwibXNnIiwiRXJyb3IiLCJhcHByb3hFcXVhbCIsImEiLCJiIiwiYWJzIiwiZGVib3VuY2UiLCJ0YXJnZXRXaW5kb3ciLCJtcyIsInRpbWVvdXRJZCIsImFyZ3MiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiYXBwbHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/virtual-core/dist/esm/utils.js\n");

/***/ })

};
;